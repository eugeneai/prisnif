%----Version 0.6 (HO TPTP version.internal development number)

%----DRAFT VERSION FOR EVALUATION OF HOF FEATURES.  Not in sync with TPTP.

%----Version 3.1.1.13b (TPTP version.internal development number)
%----Intended uses of the various parts of the TPTP syntax are explained
%----in the TPTP technical manual, linked from www.tptp.org.
%----See the <comment> entries regarding text that can be discarded before 
%----tokenizing for this syntax.
%----White space is almost irrelevant, but, for the Prolog people, all tokens
%----consisting of non-alphanumeric characters shuold be followed bya space.

%----Files. Empty file is OK.
<TPTP file>          ::= <TPTP input>*
<TPTP input>         ::= <annotated formula> | <include> |
                         <comment> | <system comment>

%----Formula records
<annotated formula>  ::= <hof annotated> | <cnf annotated>
%----Future languages may include ...  english | efof | tfof | mathml | ...
%----Keyword fof means the same as hof, retained for backward compatibility.
<hof annotated>      ::= hof(<name>,<formula role>,<hof formula><annotations>). |
                         fof(<name>,<formula role>,<hof formula><annotations>).
<cnf annotated>      ::= cnf(<name>,<formula role>,<cnf formula><annotations>).
<annotations>        ::= <null> | ,<source> | ,<source>,<useful info>

%----Types for problems.
%----Note: The previous <source type> from ...
%----   <formula role> ::= <user role>-<source> 
%----... is now gone. Parsers may choose to be tolerant of it for backwards 
%----compatibility.
<formula role>       ::= axiom |
                         hypothesis |
                         definition |
                         lemma |
                         theorem |
                         conjecture |
                         lemma_conjecture |
                         negated_conjecture |
                         plain |
                         unknown
%----"axiom"s are accepted, without proof, as a basis for proving "conjecture"s 
%----and "lemma_conjecture"s in FOF problems. In CNF problems "axiom"s are 
%----accepted as part of the set whose satisfiability has to be established.
%----There is no guarantee that the axioms of a problem are consistent.
%----"hypothesis"s are assumed to be true for a particular problem, and are 
%----used like "axiom"s.
%----"definition"s are used to define symbols, and are used like "axiom"s.
%----"lemma"s and "theorem"s have been proven from the "axiom"s, can be used 
%----like "axiom"s, but are redundant wrt the "axiom"s. "lemma" is used as the 
%----role of proven "lemma_conjecture"s, and "theorem" is used as the role of 
%----proven "conjecture"s, in output. A problem containing a "lemma" or 
%----"theorem" that is not redundant wrt the "axiom"s is ill-formed. "theorem"s
%----are more important than "lemma"s from the user perspective.
%----"conjecture"s occur in only FOF problems, and are to all be proven from 
%----the "axiom"(-like) formulae. A problem is solved only when all 
%----"conjecture"s are proven.
%----"lemma_conjecture"s are expected to be provable, and may be useful to 
%----prove, while proving "conjecture"s.
%----"negated_conjecture"s ocuur in only CNF problems, and are formed from
%----negation of a "conjecture" in a FOF to CNF conversion.
%----"plain"s have no special user semantics, and can be used like "axiom"s.
%----"unknown"s have unknown role, and this is an error situation.

%----HOF formulae. All formulae must be closed.
<hof formula>        ::= <binary formula> | <unitary formula>
<tptp operator>      ::= <unary connective> | <binary connective> |
                         <assoc connective> | <equality connective>
<binary formula>     ::= <nonassoc binary> | <assoc binary> | <apply term>
%----Only some binary connectives are associative
%----There's no precedence amoung binary connectives
<nonassoc binary>    ::= <unitary formula> <binary connective> <unitary formula>
<binary connective>  ::= <=> | => | <= | <~> | ~<vline> | ~&
%----Associative connectives & and | are in <assoc binary>
<assoc binary>       ::= <or formula> | <and formula>
<or formula>         ::= <unitary formula> <vline> <unitary formula>
                         <more or formula>*
<more or formula>    ::= <vline> <unitary formula>
<and formula>        ::= <unitary formula> & <unitary formula>
                         <more and formula>*
<more and formula>   ::= & <unitary formula>
<assoc connective>   ::= & | <vline>
%----<unitary formula> are in ()s or do not have a <binary connective> at the 
%----top level.
<unitary formula>    ::= <quantified formula> | <unary formula> |
                         <lambda term> | <lower formula>
% | (<hof formula>)

<quantified formula> ::= <quantifier> [<variable decls>] : <unitary formula>
<quantifier>         ::= ! | ?
%----! is universal quantification and ? is existential. Syntactically, the 
%----quantification is the left operand of :, and the <unitary formula> is 
%----the right operand. Although : is a binary operator syntactically, it is 
%----not a <binary connective>, and thus a <quantified formula> is a 
%----<unitary formula>.
%----Universal   example: ! [X,Y] : ((p(X) & p(Y)) => q(X,Y)).
%----Existential example: ? [X,Y] : (p(X) & p(Y)) & ~ q(X,Y).
%----Quantifiers have higher precedence than binary connectives, so in
%----the existential example the quantifier applies to only (p(X) & p(Y)).


<lower formula>      ::= <hof atom> | (<hof formula>)

%----<hof atom> is <atomic formula> in the context of <hof formula>.
%----<atomic formula> is retained for integrity of <cnf formula>.
<hof atom>           ::= <term> | <defined hof atom> | <typed constant>
<defined hof atom>   ::= $true | $false |
                         <lower formula> = <type term> |
                         <lower formula> = <lower formula> |
                         <lower formula> != <lower formula> 



%----<apply term> must have @ at top level.
%----<lambda term> can drop down to <term> immediately.
%----<term> cannot climb back up to <apply term>, or <lambda term>.
%----In this context &, |, ~, $true, $false are "macros" for
%----boolean functions that could be denoted with lambda terms.
%----E.g., & : o->o->o.

<apply term>         ::= <apply term> @ <unitary formula> |
                         <apply term> @ <type term> |
                         <unitary formula> @ <unitary formula> |
                         <unitary formula> @ <type term>
<lambda term>        ::= <lambda symbol> [<variable decls>] : <unitary formula>

%----@ (denoting apply) is left-associative and lambda is right-associative.
%----lambda [X] : lambda [Y] : f @ g (where f and g are <apply terms>s)
%----should be parsed as (lambda [X] : (lambda [Y] : f)) @ g.
%----Its Beta reduction is lambda [Y] : f[X:=g], a function of Y,
%----in accordance with the usual Currying.
%----(Notation follows Stansifer; [Benzmuller, Brown 2005] writes [g/X]f.)
%----If X occurs in g, it is outside the scope of the lambda [X] shown
%----and the Beta reduction needs to be preceded by a rename of the bound X.
%----Of course it is safer and clearer not to overwork bound variables.
%----Use parenthese to get lambda [X] : (lambda [Y] : f @ g), or
%----lambda [X] : (lambda [Y] : (f @ g)).

%----lambda might have a symbol in the future.
<lambda symbol>      ::= lambda | ^

<variable decls>     ::= <variable decl> | <variable decl>,<variable decls>
%----Future variables may have sorts and existential counting
%----<variable decl> is untyped or typed variable declaration.
<variable decl>      ::= <variable> | <typed variable>
<typed variable>     ::= <variable> : <type expr>
<typed constant>     ::= (<constant> : <type expr>)

%----<type term> is disjoint from <term>, but some <term>s can be types.
%----<map arrow> is right-associative: o->o->o means o->(o->o).
<type term>          ::= (<unitary type> <map arrow> <type expr>) |
                         <defined type>
<type expr>          ::= <unitary type> <map arrow> <type expr> |
                         <unitary type>
<unitary type>       ::= <atomic type> |
                         (<unitary type> <map arrow> <type expr>)
<atomic type>        ::= <term> | <defined type>
<defined type>       ::= $o | $i | $type
<map arrow>          ::= -> | >



%----Unary connectives bind more tightly than binary
<unary formula>      ::= <unary connective> <unitary formula>
<unary connective>   ::= ~

%----CNF formulae (variables implicitly universally quantified)
<cnf formula>        ::= (<disjunction>) | <disjunction>
<disjunction>        ::= <literal> <more disjunction>*
<more disjunction>   ::= <vline> <literal>
<literal>            ::= <atomic formula> | ~ <atomic formula>

%----Atoms (<predicate> is not used currently)
<atomic formula>     ::= <plain atom> | <defined atom> | <system atom>
<plain atom>         ::= <plain term>
%----A <plain atom> looks like a <plain term>, but really we mean
%----  <plain atom>         ::= <proposition> | <predicate>(<arguments>)
%----  <proposition>        ::= <atomic word>
%----  <predicate>          ::= <atomic word>
%----Using <plain term> removes a reduce/reduce ambiguity in lex/yacc.
<arguments>          ::= <term> | <term>,<arguments>
<defined atom>       ::= $true | $false | <term> <equality connective> <term>
<equality connective>  ::= = | !=
%----Some systems still interprete equal/2 as equality. The use of equal/2
%----for other purposes is therefore discouraged. Please refrain from either 
%----use. Use infix '=' for equality. Note: <term> != <term> is equivalent
%----to ~ <term> = <term>
%----More defined atoms may be added in the future.
<system atom>        ::= <system term>
%----<system atom>s are used for evaluable predicates that are available
%----in particular tools. The predicate names are not controlled by the
%----TPTP syntax, so use with due care. The same is true for <system term>s.

%----Terms
<term>               ::= <function term> | <variable>
<function term>      ::= <plain term> | <defined term> | <system term>
<plain term>         ::= <constant> | <functor>(<arguments>)
<constant>           ::= <atomic word> | (<tptp operator>)
<functor>            ::= <atomic word>
%----<numbers>s and <distinct object>s are always interpreted as themselves
<defined term>       ::= <number> | <distinct object>
<system term>        ::= <system constant> | <system functor>(<arguments>)
<system functor>     ::= <atomic system word>
<system constant>    ::= <atomic system word>
<variable>           ::= <upper word>

%----Formula sources
<source>             ::= <dag source> | <internal source> | <external source> |
                         unknown
%----Only a <dag source> can be a <name>, i.e., derived formulae can be
%----identified by a <name> or an <inference record> 
<dag source>         ::= <name> | <inference record>
<inference record>   ::= inference(<inference rule>,<useful info>,
                             [<parent info list>])
<inference rule>     ::= <atomic word>
%----Examples are        deduction | modus_tollens | modus_ponens | rewrite | 
%                        resolution | paramodulation | factorization | 
%                        cnf_conversion | cnf_refutation | ...
<parent info list>   ::= <parent info> | <parent info>,<parent info list>
<parent info>        ::= <source><parent details>
<theory>             ::= theory(<theory name>)
<theory name>        ::= equality | ac
%----More theory names may be added in the future.
<parent details>     ::= :<atomic word> | <null>
<internal source>    ::= introduced(<intro type><intro info>)
<intro type>         ::= definition | axiom_of_choice | tautology
%----This should be used to record the symbol being defined, or the function
%----for the axiom of choice
<intro info>         ::= ,<useful info> | <null>
<external source>    ::= <file source> | <creator source> | <theory>
<file source>        ::= file(<file name>,<file node name>)
<file name>          ::= <atomic word>
<file node name>     ::= <name> | unknown
<creator source>     ::= creator(<creator name><creator info>)
<creator name>       ::= <atomic word>
<creator info>       ::= ,<useful info> | <null>

%----Useful info fields
<useful info>        ::= [] | [<info items>]
<info items>         ::= <info item> | <info item>,<info items>
<info item>          ::= <formula item> | <inference item> | <general function>
%----Useful info for formula records
<formula item>       ::= <description item> | <iquote item> 
<description item>   ::= description(<atomic word>)
<iquote item>        ::= iquote(<atomic word>)
%----Useful info for inference records
<inference item>     ::= <inference status> | <refutation>
<inference status>   ::= status(<status value>)
%----These are the status values from the SZS ontology
<status value>       ::= tau | tac | eqv | thm | sat | cax | noc | csa | cth |
                         ceq | unc | uns | sab | sam | sar | sap | csp | csr |
                         csm | csb
<inference info>     ::= <inference rule>(<atomic word>,<general list>)
<refutation>         ::= refutation(<file source>)
%----Useful info for creators is just <general function>

%----Include directives
<include>            ::= include(<file name><formula selection>).
<formula selection>  ::= <null> | ,[<name list>]
<name list>          ::= <name> | <name>,<name list>

%----General purpose
<general term>       ::= <general function> | <general list>
<general list>       ::= [] | [<general arguments>]
<general function>   ::= <constant> | <functor>(<general arguments>)
<general arguments>  ::= <general term> | <general term>,<general arguments>
%----The following are reserved <name>s: unknown file inference creator
<name>               ::= <atomic word> | <unsigned integer>
<atomic word>        ::= <lower word> | <single quoted>
<null>               ::=

%----All numbers are implicitly distinct
<number>             ::= <real> | <integer>
<integer>            ::= <signed integer> | <unsigned integer>

%------------------------------------------------------------------------------
%----Rules from here on down are for building tokens in the lexer.

%----System Comments are used for system specific annotation of anything.
%----They look like comments (see next), so by default they are discarded.
%----However, a wily user of the syntax can notice the $$ and store/extract
%----information from the "comment".
%----System specific annotations should begin $$, then identify the system,
%----followed by a :, e.g., /*$$Otter 3.3: Demodulator */
<system comment>     ::= %$$<char>*<until eoln> |
                         /<star>$$<char or eoln>*<star>/ 
%----Comments. These may be retained for non-logical purposes. Comments
%----can occur only between annotated formulae (see <TPTP input>), but
%----it seems likely that people will put them elsewhere and simply
%----strip them before tokenising.
%----A string that matches both <system comment> and <comment> should be
%----recognized as <system comment>.
<comment>            ::= %<char>*<until eoln> | /<star><char or eoln>*<star>/

<atomic system word> ::= $$<a-z><a-z0-9A-Z_>*
<upper word>         ::= <A-Z><a-z0-9A-Z_>*
<lower word>         ::= <a-z><a-z0-9A-Z_>*
<single quoted>      ::= '<char>*'
%----\ is used as the escape character for ' and \, i.e., \' is  a quote and
%----\\ is a backslash. For input and output in TPTP syntax the \ is printed.
<real>  ::= <signed integer><decimal part> | <unsigned integer><decimal part>
<signed integer>     ::= <sign><unsigned integer>
<sign>               ::= + | -
<unsigned integer>   ::= <0-9><0-9>*
<decimal part>       ::= .<0-9><0-9>*
<distinct object>    ::= "<char>*"
%----All <distinct object> are implicitly distinct. 
%----\ is used as the escape character for " and \, i.e., \" is  a quote and
%----\\ is a backslash. For input and output in TPTP syntax the \ is printed.
%----"printing ASCII" includes those having ASCII codes 40-126 decimal.
<char>               ::= ... any printing ASCII character
<char or eoln>       ::= ... any printing ASCII character, plus eoln
<until eoln>         ::= ... right context is eoln ($ in grep, sed, lex, etc.)
<vline>              ::= ... a vertical line character
<star>               ::= ... a star character

