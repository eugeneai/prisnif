/*----Version 3.1.1.13d (TPTP version.internal development number) */
/*----Intended uses of the various parts of the TPTP syntax are explained */
/*----in the TPTP technical manual, linked from www.tptp.org. */
/*----See the <comment> entries regarding text that can be discarded before  */
/*----tokenizing for this syntax. */
/*----White space is almost irrelevant, but, for the Prolog people, all tokens */
/*----consisting of non-alphanumeric characters shuold be followed bya space. */

/*----Files. Empty file is OK. */
<TPTP_file>          ::= <TPTP_input>*
<TPTP_input>         ::= <annotated_formula> | <include>

/*----Formula records */
<annotated_formula>  ::= <fof_annotated> | <cnf_annotated> |
                         <TPTP_input_formula> | <TPTP_input_clause>
/*----Future languages may include ...  english | efof | tfof | mathml | ... */
<fof_annotated>      ::= fof(<name>,<formula_role>,<fof_formula><annotations>).
<cnf_annotated>      ::= cnf(<name>,<formula_role>,<cnf_formula><annotations>).
<annotations>        ::= <null> | ,<source> | ,<source>,<useful_info>

/*----Types for problems. */
/*----Note: The previous <source_type> from ... */
/*----   <formula_role> ::= <user_role>-<source>  */
/*----... is now gone. Parsers may choose to be tolerant of it for backwards  */
/*----compatibility. */
<formula_role>       ::= <atomic_word>
<formula_role>       :== axiom |
                         hypothesis |
                         definition |
                         lemma |
                         theorem |
                         conjecture |
                         lemma_conjecture |
                         negated_conjecture |
                         plain |
                         unknown
/*----"axiom"s are accepted, without proof, as a basis for proving "conjecture"s  */
/*----and "lemma_conjecture"s in FOF problems. In CNF problems "axiom"s are  */
/*----accepted as part of the set whose satisfiability has to be established. */
/*----There is no guarantee that the axioms of a problem are consistent. */
/*----"hypothesis"s are assumed to be true for a particular problem, and are  */
/*----used like "axiom"s. */
/*----"definition"s are used to define symbols, and are used like "axiom"s. */
/*----"lemma"s and "theorem"s have been proven from the "axiom"s, can be used  */
/*----like "axiom"s, but are redundant wrt the "axiom"s. "lemma" is used as the  */
/*----role of proven "lemma_conjecture"s, and "theorem" is used as the role of  */
/*----proven "conjecture"s, in output. A problem containing a "lemma" or  */
/*----"theorem" that is not redundant wrt the "axiom"s is ill-formed. "theorem"s */
/*----are more important than "lemma"s from the user perspective. */
/*----"conjecture"s occur in only FOF problems, and are to all be proven from  */
/*----the "axiom"(-like) formulae. A problem is solved only when all  */
/*----"conjecture"s are proven. */
/*----"lemma_conjecture"s are expected to be provable, and may be useful to  */
/*----prove, while proving "conjecture"s. */
/*----"negated_conjecture"s ocuur in only CNF problems, and are formed from */
/*----negation of a "conjecture" in a FOF to CNF conversion. */
/*----"plain"s have no special user semantics, and can be used like "axiom"s. */
/*----"unknown"s have unknown role, and this is an error situation. */

/*----FOF formulae. All formulae must be closed. */
<fof_formula>        ::= <binary_formula> | <unitary_formula>
<binary_formula>     ::= <nonassoc_binary> | <assoc_binary>
/*----Only some binary connectives are associative */
/*----There's no precedence amoung binary connectives */
<nonassoc_binary>    ::= <unitary_formula> <binary_connective> <unitary_formula>
<binary_connective>  ::= <=> | => | <= | <~> | ~<vline> | ~&
/*----Associative connectives & and | are in <assoc_binary> */
<assoc_binary>       ::= <or_formula> | <and_formula>
<or_formula>         ::= <unitary_formula> <vline> <unitary_formula>
                         <more_or_formula>*
<more_or_formula>    ::= <vline> <unitary_formula>
<and_formula>        ::= <unitary_formula> & <unitary_formula>
                         <more_and_formula>*
<more_and_formula>   ::= & <unitary_formula>
/*----<unitary_formula> are in ()s or do not have a <binary_connective> at the  */
/*----top level. */
<unitary_formula>    ::= <quantified_formula> | <unary_formula> |
                         (<fof_formula>) | <atomic_formula>
<quantified_formula> ::= <quantifier> [<variable_list>] : <unitary_formula>
<quantifier>         ::= ! | ?
/*----! is universal quantification and ? is existential. Syntactically, the  */
/*----quantification is the left operand of :, and the <unitary_formula> is  */
/*----the right operand. Although : is a binary operator syntactically, it is  */
/*----not a <binary_connective>, and thus a <quantified_formula> is a  */
/*----<unitary_formula>. */
/*----Universal   example: ! [X,Y] : ((p(X) & p(Y)) => q(X,Y)). */
/*----Existential example: ? [X,Y] : (p(X) & p(Y)) & ~ q(X,Y). */
/*----Quantifiers have higher precedence than binary connectives, so in */
/*----the existential example the quantifier applies to only (p(X) & p(Y)). */
<variable_list>      ::= <variable> | <variable>,<variable_list>
/*----Future variables may have sorts and existential counting */
/*----Unary connectives bind more tightly than binary */
<unary_formula>      ::= <unary_connective> <unitary_formula>
<unary_connective>   ::= ~

/*----CNF formulae (variables implicitly universally quantified) */
<cnf_formula>        ::= (<disjunction>) | <disjunction>
<disjunction>        ::= <literal> <more_disjunction>*
<more_disjunction>   ::= <vline> <literal>
<literal>            ::= <atomic_formula> | ~ <atomic_formula>

/*----Atoms (<predicate> is not used currently) */
<atomic_formula>     ::= <plain_atom> | <defined_atom> | <system_atom>
<plain_atom>         ::= <plain_term>
/*----A <plain_atom> looks like a <plain_term>, but really we mean */
/*----  <plain_atom>         ::= <proposition> | <predicate>(<arguments>) */
/*----  <proposition>        ::= <atomic_word> */
/*----  <predicate>          ::= <atomic_word> */
/*----Using <plain_term> removes a reduce/reduce ambiguity in lex/yacc. */
<arguments>          ::= <term> | <term>,<arguments>
<defined_atom>       ::= $true | $false |
                         <term> = <term> | <term> != <term>
/*----Some systems still interprete equal/2 as equality. The use of equal/2 */
/*----for other purposes is therefore discouraged. Please refrain from either  */
/*----use. Use infix '=' for equality. Note: <term> != <term> is equivalent */
/*----to ~ <term> = <term> */
/*----More defined atoms may be added in the future. */
<system_atom>        ::= <system_term>
/*----<system_atom>s are used for evaluable predicates that are available */
/*----in particular tools. The predicate names are not controlled by the */
/*----TPTP syntax, so use with due care. The same is true for <system_term>s. */

/*----Terms */
<term>               ::= <function_term> | <variable>
<function_term>      ::= <plain_term> | <defined_term> | <system_term>
<plain_term>         ::= <constant> | <functor>(<arguments>)
<constant>           ::= <atomic_word>
<functor>            ::= <atomic_word>
/*----<numbers>s and <distinct_object>s are always interpreted as themselves */
<defined_term>       ::= <number> | <distinct_object>
<system_term>        ::= <system_constant> | <system_functor>(<arguments>)
<system_functor>     ::= <atomic_system_word>
<system_constant>    ::= <atomic_system_word>
<variable>           ::= <upper_word>

/*----Formula sources */
<source>             ::= <general_function>
<source>             :== <dag_source> | <internal_source> | <external_source> |
                         unknown
/*----Only a <dag_source> can be a <name>, i.e., derived formulae can be */
/*----identified by a <name> or an <inference_record>  */
<dag_source>         :== <name> | <inference_record>
<inference_record>   :== inference(<inference_rule>,<useful_info>,
                         [<parent_info_list>])
<inference_rule>     :== <atomic_word>
/*----Examples are        deduction | modus_tollens | modus_ponens | rewrite |  */
/*                        resolution | paramodulation | factorization |  */
/*                        cnf_conversion | cnf_refutation | ... */
<parent_info_list>   :== <parent_info> | <parent_info>,<parent_info_list>
<parent_info>        :== <source><parent_details>
<theory>             :== theory(<theory_name>)
<theory_name>        :== equality | ac
/*----More theory names may be added in the future. */
<parent_details>     :== :<atomic_word> | <null>
<internal_source>    :== introduced(<intro_type><intro_info>)
<intro_type>         :== definition | axiom_of_choice | tautology
/*----This should be used to record the symbol being defined, or the function */
/*----for the axiom of choice */
<intro_info>         :== ,<useful_info> | <null>
<external_source>    :== <file_source> | <creator_source> | <theory>
<file_source>        :== file(<file_name>,<file_node_name>)
<file_node_name>     :== <name> | unknown
<creator_source>     :== creator(<creator_name><creator_info>)
<creator_name>       :== <atomic_word>
<creator_info>       :== ,<useful_info> | <null>

/*----File name and Useful Info fields */
<file_name>          ::= <atomic_word>
<useful_info>        ::= <general_list>
<useful_info>        :== [] | [<info_items>]
<info_items>         :== <info_item> | <info_item>,<info_items>
<info_item>          :== <formula_item> | <inference_item> | <general_function>
/*----Useful info for formula records */
<formula_item>       :== <description_item> | <iquote_item> 
<description_item>   :== description(<atomic_word>)
<iquote_item>        :== iquote(<atomic_word>)
/*----Useful info for inference records */
<inference_item>     :== <inference_status> | <refutation>
<inference_status>   :== status(<status_value>)
/*----These are the status values from the SZS ontology */
<status_value>       :== tau | tac | eqv | thm | sat | cax | noc | csa | cth |
                         ceq | unc | uns | sab | sam | sar | sap | csp | csr |
                         csm | csb
<inference_info>     :== <inference_rule>(<atomic_word>,<general_list>)
<refutation>         :== refutation(<file_source>)
/*----Useful info for creators is just <general_function> */
/*----Include directives */
<include>            ::= include(<file_name><formula_selection>).
<formula_selection>  ::= <null> | ,[<name_list>]
<name_list>          ::= <name> | <name>,<name_list>

/*----General purpose */
<general_term>       ::= <general_function> | <general_list>
<general_list>       ::= [] | [<general_arguments>]
<general_function>   ::= <name> | <functor>(<general_arguments>)
<general_arguments>  ::= <general_term> | <general_term>,<general_arguments>
/*----The following are reserved <name>s: unknown file inference creator */
<name>               ::= <atomic_word> | <unsigned_integer>
<atomic_word>        ::= <lower_word> | <single_quoted>
<null>               ::=

/*----All numbers are implicitly distinct */
<number>             ::= <real> | <integer>
<integer>            ::= <signed_integer> | <unsigned_integer>


/*------------------------------------------------------------------------------ */
/*----Rules from here on down are for defining tokens (terminal symbols) */
/*----of the grammar, assuming they will be recognized by a lexical scanner. */

/*----Usual regexp notation is used mostly, as in grep, lex, awk, sed, etc. */
/*----[ ] denotes a selection of ONE of the enclosed characters; e.g. */
/*----[0-9] means one digit.  Inside [ ], special meanings are disabled; */
/*----e.g., [.] is a period whereas . is any character except a newline. */
/*----[^abc] means any character EXCEPT a, b, or c.  [\^] matches a caret. */
/*----[\\] matches a backslash.  See lex/flex documentation for details. */
/*----For uniformity and safety, [ ] is placed around single characters even */
/*----when not necessary. */

/*----A ::- rule defines a token. */
/*----A ::: rule defines a macro that is not a token. */
/*----"..." means the definition is imprecise and manual coding is needed. */
/*----"% $$" provides semantic information, and explains "...". */
<digit>                ::: [0-9]
<lower>                ::: [a-z]
<upper>                ::: [A-Z]
<alphanum>             ::: (<lower>|<upper>|<digit>|[_])
<any_char>             ::: (.|\n)
<ddollar>              ::: [$][$]

<vline>                ::- [|] ...
/* $$ token for <vline> is VLINE, conflicts with meta-symbol, hard-coded. */

<real>                 ::- (<signed_integer>|<unsigned_integer>)<decimal_part>
<signed_integer>       ::- [+-]<unsigned_integer>
<unsigned_integer>     ::- <digit><digit>*
<decimal_part>         ::- [.]<digit><digit>*

<upper_word>           ::- <upper><alphanum>*
<lower_word>           ::- <lower><alphanum>*
<atomic_system_word>   ::- <ddollar><lower><alphanum>*

/*----System Comments are used for system specific annotation of anything. */
/*----They look like comments (see next), so by default they are discarded. */
/*----However, a wily user of the syntax can notice the $$ and store/extract */
/*----information from the "comment". */
/*----System specific annotations should begin $$, then identify the system, */
/*----followed by a :, e.g., /* $$ Otter 3.3: Demodulator */

/*----Comments. These may be retained for non-logical purposes. Comments */
/*----can occur only between annotated formulae (see <TPTP_input>), but */
/*----it seems likely that people will put them elsewhere and simply */
/*----strip them before tokenising. */

/* $$ A string that matches both <system_comment> and <comment> should be */
/* $$ recognized as <system_comment>. */
<system_comment>       ::: <system_comment_one>|<system_comment_multi>
<comment>              ::: <comment_one>|<comment_multi>
<system_comment_one>   ::: [%][ ]*<ddollar>.*
<system_comment_multi> ::: [/][*][ ]*<ddollar>([^*]*[*][*]*[^/*])*[^*]*[*][*]*[/]
/* $$ Approximately, [/][*][ ]*<ddollar><any_char>*[*][/] */
/* $$ Correct regexp ends at FIRST [*][/] */
/* $$ See comment for <comment_multi> below. */
<comment_one>          ::: [%].*
<comment_multi>        ::: [/][*]([^*]*[*][*]*[^/*])*[^*]*[*][*]*[/]
/* $$ Approximately, [/][*]<any_char>*[*][/] */
/* $$ Correct regexp ends at FIRST [*][/] */
/* $$ BEWARE: lex will end at the LAST [*][/] in the whole file if you let it. */

/* $$ <single_quoted> and <distinct_object> must contain only "printing ASCII", */
/* $$ which includes space, and consists of ASCII codes 40-126 decimal. */

<single_quoted>        ::- [']([^\\']|[\\][']|[\\][\\])*[']
/* $$ ['].*['] would be OK except for escape sequences. */
/* $$ \ is used as the escape character for ' and \ in <single_quoted>; */
/* $$ i.e., \' is  backslash-quote and \\ is backslash-backslash. */
/* $$ For input and output in TPTP syntax the \ is present. */

/*----All <distinct_object>s are implicitly unequal; ~("a" = "b").  */
<distinct_object>      ::- ["]([^\\"]|[\\]["]|[\\][\\])*["]
/* $$ ["].*["] would be OK except for escape sequences. */
/* $$ \ is used as the escape character for " and \ in <distinct_object>; */
/* $$ i.e., \" is  backslash-quote and \\ is backslash-backslash. */
/* $$ For input and output in TPTP syntax the \ is present. */

/*------------------------------------------------------------------------------ */
/*----If you are writing a new TPTP parser, you do not need to parse the old */
/*----style TPTP formulae, i.e., ignore from here on down. */
/*----Old style TPTP clauses and formulae */
<TPTP_FOF_file>      ::= <TPTP_FOF_input>*
<TPTP_FOF_input>     ::= <TPTP_input_formula> | <include>
<TPTP_input_formula> ::= input_formula(<name>,<formula_role>,<fof_formula>).
<TPTP_CNF_file>      ::= <TPTP_CNF_input>*
<TPTP_CNF_input>     ::= <TPTP_input_clause> | <include>
<TPTP_input_clause>  ::= input_clause(<name>,<formula_role>,<TPTP_literals>).

/*----Old style TPTP CNF */
<TPTP_literals>      ::= [] | [<TPTP_literal><rest_TPTP_literals>*]
<rest_TPTP_literals> ::= ,<TPTP_literal>
<TPTP_literal>       ::= <TPTP_sign><atomic_formula>
<TPTP_sign>          ::= ++ | --

