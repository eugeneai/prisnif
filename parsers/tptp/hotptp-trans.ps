%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: hotptp-trans.dvi
%%Pages: 4
%%PageOrder: Ascend
%%Orientation: Landscape
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Bold Times-Roman Times-Italic Symbol
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t landscape hotptp-trans -o
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.08.09:1115
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 52099146 40258431 1000 600 600 (hotptp-trans.dvi)
@start
%DVIPSBitmapFont: Fa cmr10 19.907 2
/Fa 2 42 df<163C167C16FCED01F01503ED07E0ED0FC0ED1F80ED3F00157E5D14014A5A
4A5AA24A5A4A5A143F5D4AC7FC5C5C13015C1303495AA2495AA2495AA2133F5C137F5CA2
13FF91C8FC5AA3485AA3485AA3120F5BA3121FA25BA3123FA45BA2127FA75B12FFB3A712
7F7FA7123FA27FA4121FA37FA2120FA37F1207A36C7EA36C7EA37E80137FA280133F8013
1FA26D7EA26D7EA26D7E130180130080806E7E81141F6E7E6E7EA26E7E6E7E1400157E81
ED1F80ED0FC0ED07E0ED03F01501ED00FC167C163C26A570FB40>40
D<127012F8127C7E123F6C7E6C7E6C7E6C7E6C7E6C7E7F137F6D7EA26D7E6D7E8013076D
7E801301801300806E7EA26E7EA26E7EA281140F811407A281140381A36E7EA36E1380A3
16C0157FA316E0A2153FA316F0A4151FA216F8A7150F16FCB3A716F8151FA716F0A2153F
A416E0A3157FA216C0A315FF1680A34A1300A34A5AA35D14075DA2140F5D141F5DA24A5A
A24A5AA24AC7FC5C13015C13035C495A130F5C495A495AA249C8FC13FE5B485A485A485A
485A485A48C9FC123E5A5A127026A577FB40>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi10 19.907 1
/Fb 1 59 df<EA03F0EA0FFC487E487E481380A2B512C0A66C1380A26C13006C5A6C5AEA
03F0121272912E>58 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmtt12 24.88 1
/Fc 1 95 df<ED03E0ED0FF8ED3FFE4B7E4AB512C0020714F0021F14FC027F14FF49B712
C04982010F16F8013F16FE90B97E000318E0486F80001FDAFC1F14FC007FDAF00714FF4B
7EB6D8800015804AC7123F4A8002F0140702C014014A806C48C9003F130001F8160F6C48
705AD81FC0EE01FC0002CB1220411D6CFD6A>94 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmtt12 17.28 52
/Fd 52 127 df<153E157F4B7EA9020313E0023F13FF91B612E0010715F84915FE013F81
4916C090B87E4883484913BF4801F001837F4801C001807F480100147F49ED1FFED83FF8
150F496F7E485A8349178012FFA2495DA56D6F1300A2715A6C6CED00786D93C7FC7F6C7E
7F6C6C7E6C13E014F86C90B5FC7E6C15E06C15FC6DECFF80011F15E06D15F8010315FED9
007F80020F810200818404BF7F168704817F9338807FFC173F717E170F717E831206D83F
C06F1380487EA2486C81A55B5FA21900007F5E7F4D5A6C6C150F6D4B5A6C6C153F6DEDFF
F86C01C001815B6C01F0138702FE90B55A6C90B75A6C5F6C94C7FC6D15FC011F5D010715
E001011580D9003F01FCC8FC020313C002005BA96FC9FC153E397078E34A>36
D<EC03F0EC1FFEEC7FFF91B57E49804980A24980A290380FFE1F9138F80FF8131FECF007
14E082013F130314C0A815075E150FA2DAE01F90381FFFFC011F4A4813FE033F4913FFED
7FE015FF16C014F1D90FF3496C13FE02F76E13FC93390003FC00DAFFFE13074B5C6D150F
5D4B5C6D49131F4B5C495B173F4990C75B5B49157F496D5C90B514FF48804894C7FC4890
38BFE001023F5C4890381FF003EA1FFE9026FC0FF85BD83FF8EBFC07EBF007007F6E485A
EBE0036E6C485AA248486CEBBFE016FF815F816F491318197E6F90C712FFA26F5A6D8000
7F4A7F5D6D496D5A003F4A01E013FE6D90B5EAF803020314FC261FFE0F9038DFFF0790B6
008FEBFFFC6C15076C4A6C14F84B7E6C4A6C14F06C02E06D13E06C6C49011F13C06D90C7
6C1300D907F8EC01FC405C7CD94A>38 D<ED07F0150FED1FF8157F15FF4A13F05C020F13
C04A138091383FFE004A5A5D4A5A495B495B495B92C7FC495A495AA2495A495AA2495A5C
5A5C5A91C8FC5A5B120FA25B121F5BA2123FA25BA2127FA25BA412FFA25BAE7FA2127FA4
7FA2123FA27FA2121FA27F120F7FA212077F7E807E807E806D7EA26D7E6D7EA26D7E6D7E
816D7F6D7F6D7F6E7E816E7E91381FFF806E13C0020313F0806E13F8157F151FED0FF015
07257068E34A>40 D<123F487E487E13F07F6C7E6C7E6C6C7E6C7F00037F6C7F7E6D7E6D
7E6D7E6D7E7F6D7F6D7FA26D7F6E7EA26E7E141F81140F81140781801680A28016C080A2
16E0A2157FA216F0A2153FA416F8A2151FAE153FA216F0A4157FA216E0A215FFA216C0A2
5C16805CA216005C5D140F5D141F5D143F4A5AA24A5A495BA2495B4990C7FC5B495A495A
495A495A5A485B000F5B485B4848C8FC485A485A5B13C06C5A6CC9FC257074E34A>I<15
F84A7E4A7EAB001817C0007EEE03F0D8FF80ED0FF801E0153F01F0157F01FCEC01FF01FE
5CD9FF83130F6C01E3013F13F0001F01F34913C0000790B71200000116FC6C6C15F06D5D
010F158001034AC7FC010014F86E5BA291B57E010314FE010F6E7E013F15E0498148B712
FC000716FF001F9026F3FE7F13C0007F01E36D13F0B50083010F13F8D9FE03130301FC80
01F0EC007F01E0153F0180150FD87E00ED03F00018EE00C0C71600AB6E5A6E5A353E76CA
4A>I<137E3801FF804813E04813F0A24813F814FCA314FEA27EA27E7EEA007F13031307
A214FC130FA2EB1FF8133FEB7FF013FF000313E0000F13C0123F481380B512005BEA7FF8
5BEA3FC0001EC7FC1724678F4A>44 D<001FB812FC007F17FFA2BA1280A46C1800A2001F
17FC390A78B04A>I<EA07E0EA1FF8EA3FFCEA7FFEA2B5FCA6EA7FFEA2EA3FFCEA1FF8EA
07E01010638F4A>I<ED7FC0913803FFF8020F13FE023F6D7E4A8091B67E010315F84981
4981EDC07F499038001FFFD93FFC01077F49486D7F4A7F49486D7F48496E7E4A143F4883
91C8121F488349150F000F83491507A248486F7EA348486F1380A34981007F18C0A54916
7F00FF18E0B06D16FFA2007F18C0A46D5DA2003F1880A26D5DA2001F1800A26D5D000F5F
6D150FA26C6C4B5AA26C6D4A5AA26C6D4A5A6E14FF6C5F6D6C495B6E5B6D6C495B6DB401
1F90C7FC6D9038C07FFE92B5FC6D5D6D5D010015E06E5C6E5C020F49C8FC020313F89138
007FC03B5C79D94A>48 D<EC01E04A7E4A7E140FA2141FA2143FA2147F14FFA25B5B130F
5B137F0007B5FC123F5AB6FC14DF141F13FE13F8EA7FC0EA1C00C7FCB3B3B2001FB712F8
4816FC4816FEA56C16FC6C16F82F5A71D94A>I<EDFFE0020F13FE023F6D7E91B612E001
0381010F15FC49814981498290B5D8803F7F489038FC000F484901037F02E06D7F48497F
48496E7E91C8123F48486F7E485A496F7EA248486F7EA2498100FF1880A24981A219C0A2
83A519E07FA2007F5E7FA25F6C7E6D5D121F6D5D6C6C5D6E147F6C6D91B5FC6C01F01303
6E130F6C01FF137F6C91B6127F6D15FE6DEDFCFF6D5D6D03E013C001035D6D4AC6FCD900
3FEBF0010207138091C81480A25FA24D1300A260170FA24D5AA2D801E04B5AD807F8157F
486C4B5A486C5E5E4C5B4C5B161F4C90C7FC49ECFFFE6CB401035BDAE01F5B91B65A6C5E
6C5E6C93C8FC6C5D6D14F8011F14E0010791C9FC9038007FF83B5C79D94A>57
D<EA07E0EA1FF8EA3FFCEA7FFEA2B5FCA6EA7FFEA2EA3FFCEA1FF8EA07E0C7FCB3ACEA07
E0EA1FF8EA3FFCEA7FFEA2B5FCA6EA7FFEA2EA3FFCEA1FF8EA07E0103E63BD4A>I<183C
18FF5F050713805F173F5F4CB512005E040F13FC4C5B047F13E093B55A030391C7FC4B5B
031F13F8037F5B92B512C002035C4A49C8FC021F5B4A13F091B55A491480010749C9FC49
5B013F13F0495B48B512804891CAFC000F13FC485B007F13E05CB5CBFC5BA27F6C13C080
001F13F86C7F000313FF6C806C6C13E06D7F010F13FC6D7F01016D7E6D14E0023F7F6E13
FC02077F6E6D7E0200806F13F0031F7F030713FE6F7F030014C0707F041F13F8707F0403
13FF82706C138083170F830501130083183C394878CF4A>60 D<001FB912F0007F18FCA2
BA12FEA46C18FCA2001F18F0CDFCAC001FB912F0007F18FCA2BA12FEA46C18FCA2001F18
F03F207BBB4A>I<121EEA7F807FEAFFF07F13FE7F6C13C080001F13F86C7F000313FF6C
806C6C13E06D7F010F13FC6D13FF0101806D14E0023F7F6E13FC02077F6E6D7E02008003
3F13F06F7F030713FE6F7F030014C0707F041F13F8707F040313FF82706C138083A25F4C
B512005E040F13FC4C5B047F13E093B55A030391C7FC4B5B031F13F84B5B92B512C00203
5C4A49C8FC021F5B4A13F091B55A491480010791C9FC4913FC013F13F0495B48B5128048
91CAFC000F13FC485B007F13E05CB5CBFC5B13F85BEA7FC05B001ECCFC394878CF4A>I<
91381FFFE049B512FE010FECFFE0013F15F890B712FE0003824817C04817E05A9126F000
7F13F0480180010313F84848C8FC01F8ED3FFC49151F4848ED0FFEA26D1507A4170F6C5A
6C48151F6C48ED3FFCCA127F933801FFF84C13F0160F4C13E0047F13C093B512804B1400
4B13FC4B5B4B13E04B5B94C7FC4B5A4B5A5E4B5A5E4A5BA24A5BA24A90C8FCA35DAC5D6E
5A91CAFCADEC01F0EC07FC4A7EA24A7EA56E5AA26E5AEC01F0375977D84A>I<4BB47E03
1F13F092B512FE020380020F15C04A81027F8191B77E5B4902007F4901F0EB3FFE4901C0
130F49496D7E4948C77E4A6E1380D97FF0804948D907F013C04A90383FFE7F484990B6FC
48494815E0150748485B495B000F18F0495B001F91387FFC1F49ECF0074B487E48484849
7E4C7E93C7EA7FF848484848143FA24A48141F1380A24B140F12FF140F13004B1407AA6F
140F1380020716F0127F6F141FA213C06E6CEC3FE0A26C6C6C6CEC7FC07013FF705A6C6C
6C6D4813806F6C4813006DECFC1F000F6EB55A6D6D5C12076D6D5C6C6C6D5C030114C06C
6D6C5C6C6DD93FFEC7FC6EEB07F06D6C90C7EA0FF0D93FFC151F6EED3FF86D6C6C14FF6D
6D13036D01F0010F13F06D01FF137F6D91B612E06D17806E1600021F5D6E15F8020315E0
02001580031F01FCC7FC030113C03D5A7AD84A>I<ED0FF84B7E4B7E4B7EA492B57EA54A
6D7EA44A80EDFE3FA4020780A2EDFC1FA2020F80A3EDF80F021F80A4EDF007023F80A44A
486C7EA54A486C7FA449824B7EA44990C76C7EA4498292B6FCA44982A4498202F8C7120F
A4013F824A1407A3017F824A80A301FF83A24A80003F01FF027F13FE486E90B6FCB61780
6F5AA34B7E6C19006C91C76C5B415A7CD94A>I<003FB7FC4816F017FCB9FC84846C8318
F86C833A007FE0000704007FEF3FFF717F83717F717F83717F187F85183F727EA2180F85
A218078584A31A8084A41AC084AF601A80A4601A00A36061180FA24E5AA2183F61187F4E
5A5F614D5B5F051F5B4D90C7FC94B5FC04075B003FB85A485F60B95A188095C8FC6C16FC
17F06C93C9FC42587ED74A>68 D<003FB712E04816FE717EB912E018F8846C83846C1880
26003FF0C714C0051F13E01707050113F07113F8187FF03FFC181FA2F00FFEA2180719FF
84A96019FE180FA2F01FFCA2183FF07FF818FF4D13F0050713E0171F94B512C091B81280
190060606018E018804DC7FC17E002F0CAFCB3A8003FB512F04880A2B67EA36C5CA26C5C
40587DD74A>80 D<DA0FFF147C027F01F013FC0103B538FE01FE010FECFF814915E3017F
15F390B8FC5A5A48EBFC01489038E0003F0280130F4890C7120301FC80484880177F4848
153F5B171F12FF5B170FA31707A27FA2715A6C7E94C8FC7F6C7E7F6C7E14C06C13F06C13
FEECFFE06C14FE6CECFFE06C15FF013F15E06D15F8010715FE010181D9003F15C0020381
DA003F80030380ED003F04037F04007FEF3FFF83711380837113C083A28319E0EA3F8000
7F177F487EA57F18FFA219C06D5DA26D17806D5D6D5D6D4B130002C04A5A02F0147F02FC
4A5A9126FFE0075B92B65A6060019F5E018793C7FC010115FC6D6C14F0007E010F14C000
7C9026007FFCC8FC3B5C79D94A>83 D<003FB912FE4884BB1280A7903BC0000FFC0001AB
6C487013006CC7167EC893C7FCB3B3B3A3027FB67E91B77EA24982A36D5EA26E5D41587C
D74A>I<001FB5D88007B512E0486E488003E081485DA36C8103C05D6C4A6C5C26003FFC
C7D87FF0C7FC131F6E4A5A130F6E495B7F6F485B7F6D6D4890C8FCA26D6D485AA2DA7FF0
5B161FDA3FF85B163FDA1FFC5B167FDA0FFE5B16FF6EB55AA26E5CA26E91C9FCA26E5BA2
6F5AA2153F5E151F153F82157F8292B5FCA24A80A24A80A24A487F167FDA0FFC7F163F02
1F80EDF81F023F80EDF00F027F80EDE00702FF804B7E49824B7E498292C7FC8449157F4A
81010F153F4A81011F151F4A81013F150F4A81017F6F7E5C263FFFFE027F13FE486D91B6
FCB66C16805EA3826C91C715006C496E5B41587CD74A>88 D<001FB912804818C04818E0
A619C001E0C812034D138019005F4D5A60173F4D5A6017FF4C5B6C485E6C485CC9485BA2
4C90C7FC5F161F4C5A5F167F4C5A5F5D4B5B5F5D4B90C8FCA24B5A5E153F4B5A5E15FF4A
5B5E5C4A5B93C9FC5C4A5AA24A5A5D147F4A5A5D5B495B5D5B4990CAFC5C011FEE0FC049
48ED1FE0F03FF0495A5C13FF485B5C5A485B91C9FC5A485A5B123F485A90B9FCBAFCA66C
18E06C18C03C5879D74A>90 D<003FB612F04815F8B712FCA516F816F001C0C8FCB3B3B3
B3B3A490B612F016F816FCA56C15F86C15F0267062E34A>I<003FB612F04815F8B712FC
A57E7EC8120FB3B3B3B3B3A4003FB6FC5AB7FCA56C15F86C15F026707BE34A>93
D<001FB812FC007F17FFA2BA1280A46C1800A2001F17FC390A787C4A>95
D<903801FFFE011FEBFFE0017F14F848B612FE486F7E834816F0488283EC800391C77FEE
3FFF160F707F6C48806C486E7F6C5ACA7FA3177FA50303B5FC92B6FC140F91B7FC130713
1F137F90B8FC0003EDE07F48ECE0004849C7FC4813F014804848C8FC485A5B485A5BA25B
A46D15FFA26D5C007F5D6D5CD83FFE141F6D6C017F13F86CD9E007B612FE91B9FC6C1980
7E6C16DF6C160F6CEDFC07013FDAF0011400010F91C7EA3FFE010101F091C8FC414178BF
4A>97 D<383FFFF0487F80B5FCA37EA27EEA000FB0EE0FFC93B57E030714E0031F14F84B
14FE92B7FC02FD8291B87E85DCE01F7FEE000703FC01017F4B6D7F03E0143F4B6E7E4B14
0F8592C87E4A6F1380A34A6F13C0A284A21AE0A2197FAA19FFA21AC0A26E5DA24E138080
606F1600606F4A5A6F143F6F4A5A6F4A5A6F130303FF010F5BDCC03F5B93B65A6102FD93
C7FC02FC5D6F5C031F14F0902607F80714C0902603F00191C8FC90C8EA3FF043597FD74A
>I<92387FFFC00203B512FC021F14FF027F15C049B712E013074916F04916F85B49EBE0
0090B5C7127F4813FC14F0485B4849EC3FF04AEC1FE04890C8EA0FC0484892C7FC5BA248
5AA2485AA25BA212FFA25BA97FA2127FA27FA26C7EA27F001FEE03FC7F6C6CED07FE806C
6D140F6C13F06EEC1FFC6C01FE147F6C6D6CEBFFF86DD9F80713F06D90B6FC6D16E06D16
C06D16800101EDFE006D5D021F14F0020714809126007FF8C7FC374176BF4A>I<93381F
FFF84C7F845EA382A282EE0007B0913801FF80021F13F0027F13FE49B61287010715C749
15F74915FF5B5B90B5EA807F489038FE000F4801F8130302E07F48497F4849147F91C812
3F4848151F5B003F160F5B1707485AA25BA212FFA25BAA7FA2127F170F7FA26C6C151FA2
173F6C7E6D157F000F16FF7F6C6D5B02E013076C6D5B6C01FC133F6C01FF90B7128092B8
12C06D15F76D03E714E06D15C7010715876DDAFE0714C00100ECF803023FD9E0011480DA
03FECAFC43597BD74A>I<ED7FF00203B5FC021F14E0027F14F849B67E4915FF010F8249
82498249EBC01F9027FFFE00037F4801F801007F48496E7E02C0143F48496E7E4890C812
0F491507001F8349815B003F18804981A2127F4917C08312FF90B9FCA71980190001C0CB
FC7F127FA37F123F7FA26C6C163F6DEE7F806C6CEEFFC0A26C6D5C14E06C6D4A13806C01
FC5C6C6D021F130090267FFFC05B6D9039F801FFFE6D90B65A6D5E6D5E6D5E01005E023F
92C7FC020F14FC020114E09126001FFEC8FC3A4179BF4A>I<4CB47E041F13F093B512FC
030380030F805D4B15805D92B7FC4AEBFC074A13F0DCC00313004A13804C6C5A4A48EB00
7895C7FC5DAB003FB812F04883B97EA56C5F6C5FC7D80FFCC9FCB3B3A8001FB712FE4882
4883A56C94C7FC6C5E39597BD84A>I<F00FF8912601FFC0EB7FFE020FD9F803B5128002
3FEBFE0F91B6009F14C0010392B612E05B5B5B4916F84901809138C07FC09126FE003F13
00D9FFF8010F9038803F804A6DEC040048496D6DC7FC4A7F48496D7FA291C8127F4883A2
49153FA66D157FA26C5F6E14FFA26C6D495B6E5B6C6D495B6E5BD97FFE013F90C8FC6E6C
B5FC92B55A90B75A5F5F485E1780D9FE3F49C9FC020F13F8020113C091CCFCA47FA26C7F
14E46DB612E017FF6D16F04916FC90B9FC000318C08548844801C0C7003F7F4848C81201
499238003FFCD83FF0EE0FFE4916074848707E84498200FF1980A290CB127FA56D17FFA2
6D5E007F19006D5ED83FF8EE0FFE6D161F6CB4EE7FFC6C01C04A485A6C01F8020F5B9126
FFC001B5FC000191B712C06C606D94C7FC011F16FC6D5E010316E0D9007F92C8FC020F14
F8DA007F90C9FC43627CBF4A>I<383FFFF0487F80B5FCA37EA27EEA000FB0EE1FFC93B5
7E030714E0031F14F84B8092B67E14FD91B8FC85EEE01FDC00077F03FC7F4B7F4B7F4B81
5D4B147FA292C8FCA25CA45CB3AC003FB690B612F848038115FCA2B700C315FEA36C0381
15FCA26C030015F847587FD74A>I<EC01F0EC07FC4A7EA24A7EA56E5AA26E5AEC01F091
CAFCAE001FB512FC4880815AA37EA27EC71203B3B3A8003FB812C04817E0A2B912F0A36C
17E0A26C17C0345974D84A>I<EE0F80EE3FE0EE7FF0A2EEFFF8A5EE7FF0A2EE3FE0EE0F
8093C7FCAE0103B612E04915F04915F8A57F7F90C8121FB3B3B3AA163F17F0A3167F000F
16E0D83FC014FF486C15C05D486C5B4B1380031F13006D137F90B65A6C5D5E6C5D5E6C15
8000074AC7FC000114F8D8001F13C02D7A79D84A>I<003FB512FE4880B77EA57E7EC712
01B3B3B3B0003FB812FC4817FEBAFCA56C17FE6C17FC385877D74A>108
D<037FEC1FC0283FFC03FFE0EBFFF8267FFE0FD9F0037FD9FF3FD9F80F7FB5486D487F91
B56C48807048806C93B6FCA26C028302E07FC649C6EC803F4A15004A6D486D7E4A5C4A5C
043F140F4A5CA34A5CA491C75BB3AD003FD9FC07B548B512C0486D48028314E04B1487B6
03C714F0A36C01FE038714E06F14836C496C020114C04C3F81BE4A>I<EE1FFC263FFFF0
90B57E48D9F80714E0DAFC1F14F8B5498092B67E14FD6C90B8FC856CEDE01FD8000FDA00
077F03FC7F4B7F4B7F4B815D4B147FA292C8FCA25CA45CB3AC003FB690B612F848038115
FCA2B700C315FEA36C038115FCA26C030015F8473F7FBE4A>I<EDFF80020F13F8023F13
FE91B67E010315E049814981013F15FE498190B50080809138FC001F4801F001077F4849
6D7F48018001007F91C8127F488349153F48486F7E49150F003F83491507A2007F834981
A3498100FF1880AA6D5DA2007F1800A26D5DA2003F5F6D150FA26C6C4B5AA26C6C4B5A6D
157F6C6D4A5A6E5B6C6D495B6C6D495B02FC131F6CD9FF80B55A6D90B6C7FC6D5D6D5D01
0715F06D5D010015806E91C8FC020F13F802001380394178BF4A>I<EE0FFC263FFFF090
B57E48D9F80714E0DAFC1F14F8B54914FE92B7FC02FD826C90B87E856CDBE01F7FD8000F
EC000703FC01017F4B6D7F03E0143F4B6E7E4B140F8592C87E4A6F1380A34A6F13C0A284
A21AE0A2197FAA19FFA21AC0A26E5DA24E138080606F1600606F4A5A6F143F6F4A5A6F4A
5A6F130303FF010F5BDCC03F5B93B65A6102FD93C7FC02FC5D6F5C031F14F0030714C003
0191C8FC9238003FF093CAFCB3A4003FB6FC4881A2B77EA36C5DA26C92CAFC435F7FBE4A
>I<EF0FFE003FB591B512C048DA800314F0B6D8C00F14F8043F14FC93B6FC03C115FE15
C36C14C76C02CFEBF80FC701DF13C092B5380007FC04FCEB03F84CEB01F004E090C7FC5E
5E93C9FC5DA25DA25DA25DA25DA45DB3A6003FB712F84882B8FC83A35F7E6C5E3F3F7BBE
4A>114 D<913A1FFF800F800103B5EAF81F011F9138FF3FC0017F15FF48B8FC5A5A5A5A
48EBE00049C7121FD87FF880491403D8FFC080A25B82A37FEF7F806C7E01F892C7FC13FE
383FFFC06C13FE6CEBFFF86CECFFE06C15FC6CEDFF806C6C15F0011F81010315FED9007F
8002011580DA000F14C0DB003F13E01607040113F0D83F809138007FF8007F163F486CED
1FFC170F7F1707A27FA26D150FA27F6DED1FF86D157F02C0ECFFF06E130302FC013F13E0
91B712C0A2188001BF1600019F15FC010F15F0010315C0267E007F49C7FC007C010713E0
364176BF4A>I<EC0FC04A7E4A7EAF003FB812FC4883BAFCA56C5F6C5FC7D83FF0C9FCB3
ABF00FC0F01FE0F03FF0A76F147FA2F0FFE06E6C5B6F4913C06F5B6ED9E03F138093B612
00806E5D6E15F86E5D6F5C6F1480030F01FCC7FC030013C03C507DCE4A>I<263FFFF049
B57E486D49806E82B55CA36C81A26C81D8000F91C7127FB3B118FFA35F5F6E5C5F6E5C6D
6D137FDBF003B612F86D90B812FCA26D18FE7F6E4A7E6E02FC14FC6EECE03F0207DA801F
13F89126007FF8C9FC473F7FBD4A>I<003FB500C0011FB512E0486E4914F0B617F86F5B
A34B7F6C19F06C4A6D14E0D801FEC93803FC006D16076C60A56E150F017F5FA56E151F01
3F5FA2ED01FC4BB4FC4B138014E0011F496D485AA35D17E0A2D90FF001DF495A92383FCF
F0A40107017F01F890C7FC14F804875BA215FF83010302035BA214FDA2EDFE01A2D901FF
ECFFFCA24B7EA35D6D6F5AA24B133F027F5DDA3FC0EB0FE0453F7EBD4A>119
D<001FB5D8C003B512F8486E488048846F5AA34B7E6C606C4A6C5C26000FFCC7D83FF0C7
FC6D6C4A5A01035E6D6C4A5A6F5A6D6D4890C8FC027F5C6E6C485AEDF00FDA1FF85B020F
495A6E6C485A913803FE7F03FF5B6E495A6E91C9FC815E6F5A6F5A150F5E4B7E4B7E824B
7E92B5FC4A486C7E707EDA03FC7F913807F81F020F6D7E03F07F4A486C7E023F6D7E9138
7FC00103807F02FF6D7F4990C76C7E495A717E49486E7E49488149486E7E003FB56C90B5
12FE486E4880B649158015E0A315C06C6F15006C4A6C5C413E7CBD4A>I<003FB5027FB5
FC486E90B61280B66C5A1AC0A31A806C4A7E6C91C76C140026007FC0020090C7FC013F5D
6E5D131F6E140360130F6E140701075E80170F01035E800101151F60806D153F6F5CA202
7F147F6F5C143F17FF6F91C8FC141F6F5A020F5CA2EDF80302075CA2EDFC0702035CA2DA
01FE5B160FA2DA00FF5B161F157FEE9FC0A2ED3FBFEEFF8081A294C9FC81A25E1507A26F
5AA215075EA2150F5EA2151F5EA2153F5EA2157F5ED803C013FFD80FF091CAFC486C5AA2
486C485A14074A5A4A5A147F90B55A6C5CA26C5C6C5C4ACBFC6C5BC613F0EB3FC0425F7C
BD4A>I<000FB912E04818F04818F8A619F001F0C8000313E04D13C04D13804D13004D5A
4D5A4D5A6C484A5B6C484A5BC9000F5B4C5B4C90C7FC4C5A4C5A4B5B4B5B4B5B4B5B4B5B
4B90C8FC4B5A4B5A4A5B4A5B4A5B4A5B4A5B4A90C9FC4A5A4A5A495B495B495B4949EC07
E04949EC0FF04948C8EA1FF8495A495A485B485B485B485B4890C9FC485A48B9FCBAFCA6
6C18F06C18E03D3E7BBD4A>I<121EEA7F80A2EAFFC0B3B3B3B3B3B0EA7F80A2EA1E000A
7060E34A>124 D<D903F8143CD91FFE147E90267FFF8013FF90B56C481380486E5A0007
ECF00F48ECFC1F4891B61200485E485E26FFFC1F5CD9F8075CD9E00314C0496C5C6C486C
91C7FC6CC7EA3FFC001EEC0FE0311174D74A>126 D E
%EndDVIPSBitmapFont
/Fe 134[73 73 2[83 46 64 64 1[83 83 83 119 46 73 3[83
1[73 2[83 83 8[101 3[92 83 101 4[138 7[101 119 2[101
19[55 45[{TeXBase1Encoding ReEncodeFont}25 165.272 /Times-Italic
rf /Ff 139[38 54 6[38 2[38 5[61 1[69 97[{TeXBase1Encoding ReEncodeFont}
6 137.733 /Times-Italic rf /Fg 136[99 69 69 38 54 46
2[69 69 107 3[38 69 2[61 1[61 1[61 24[99 25[34 46[{
TeXBase1Encoding ReEncodeFont}16 137.733 /Times-Roman
rf /Fh 139[73 7[91 108[{}2 165.272 /Symbol rf
%DVIPSBitmapFont: Fi cmsy10 19.907 6
/Fi 6 95 df<ED3FFC0203B512C0021F14F8027F14FE49B77E4982010F16F04982498249
8290B9FC4818804818C0A24818E04818F0A24818F8A24818FCA34818FEA4BBFCAC6C18FE
A46C18FCA36C18F8A26C18F0A26C18E06C18C0A26C18806C18006D5E6D5E6D5E6D5E0103
16C06D5E6D6C4AC7FC021F14F8020314C09126003FFCC8FC404077C853>15
D<007FBF12F8A2C012FCA36C1EF86C1EF0D3FCB3A9007FBF12F8A2C012FCA36C1EF8A2D3
FCB3A9003FBF12F0481EF8C012FCA36C1EF8A26E4B77CE81>17 D<4AB46C1A18021F01F0
1A38027F01FE1A7C49B67E4981010F15F04915FC4981498190B812C04AC66C6D18FC4801
E0010F6D18F848018001017F91C86D1701D807FCED3FFE484892380FFF80496F6DEE03F0
48486F7F4903006D1607726CEE0FE04848707E90CA6CB4161F726DED3FC0007E716D157F
060101F0EDFF807201FC02031300007C726C5C96263FFFC0EB1FFE00FC729039F801FFFC
487290B6FC07035E735E735E083F5D080F92C7FC745C080114F80070DF003F13E00030E0
07FEC8FC6E2777BC81>24 D<1F7C1FFEA28BA28BA28CA21F3F8CA21F1F8CA2797EA2797E
A2797E8C1F018C797F207F8D7A7E7A7E8D7A7E7A7E7A7E7A7F7A7F7B7EF93FF87B7E7BB4
FC7B13C00F0113F0003FC312FCC51280A112C0A3A11280003FFAFC00D4000113F00F0713
C05790C7FCF91FFC575AF97FE0575A565B5690C8FC565A565A565A69565A565A6920FF55
90C9FC681F0368555AA2555AA2555AA2681F3FA2681F7FA29DCAFCA267A267A21F7C9257
77D4A5>33 D<007FBBFCA2BC1280A37EA2CD123FB3B3AB000FBBFC5A5AA37E7ECD123FB3
B3AB007FBBFCA2BCFCA36C1A00A2497377F25C>57 D<171FA24D7EA24D7EA24D7EA24C7F
A34C7FA2933807FBFCA293380FF1FEA217E0041F7FA24C486C7EA24C486C7EA24C486C7E
A24C130F030181A24B486D7EA24B486D7EA24C1301030F81A24B486D7EA24B486E7EA24C
143F037F82A24BC86C7EA24A486F7EA24B1507020383A24A486F7EA24A486F7EA24A486F
7EA24B82023F84A24A48707EA24ACA6C7EA24A170F010185A24948717EA24948717EA24A
1701010F85A24948717EA24948727EA24A183F017F86A249CC6C7EA24848737EA2484873
7EA2491903000787A24848737EA24848737EA24986003F1C80A24848F23FC0A248CEEA1F
E0A2481B0FA2007CF307C01C035B6877E36E>94 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmtt12 20.74 28
/Fj 28 120 df<001FBA12E04819F04819F8BB12FCA66C19F86C19F06C19E0460C77BA59
>45 D<EA01F8EA07FE381FFF804813C0A24813E0A2B512F0A66C13E0A26C13C0A26C1380
3807FE00EA01F814145E9359>I<F11F80F13FC0F17FE01AF019FFA260A2601AE0601AC0
601A80601A00A24E5AA24E5AA218FF615F615F615F61A24D5BA24D90C7FCA25F60177F60
17FF60A24C5BA24C5BA25E605E605E95C8FC5E5FA24C5AA24C5AA25D5F5D5F5D5FA24B5B
A24B90C9FCA25D5E157F5E15FF5E5C5EA24A5BA24A5BA25C5E5C93CAFC5C5D147F5DA24A
5AA2495BA25B5D5B5D5B5DA24990CBFCA2495AA2137F5C13FF5C5A5C5A5CA2485BA2485B
A25A91CCFC5A5B127F5B12FF5BA25BA25B127F6C5A6C5A448676F759>I<EA01F8EA07FE
381FFF804813C0A24813E0A2B512F0A66C13E0A26C13C0A26C13803807FE00EA01F8C8FC
B3B0EA01F8EA07FE381FFF804813C0A24813E0A2B512F0A66C13E0A26C13C0A26C138038
07FE00EA01F8144A5EC959>58 D<001FBB1280481AC0481AE0BC12F0A66C1AE06C1AC000
0F1A00CFFCAE000FBBFC003F1AC0481AE0BC12F0A66C1AE06C1AC06C1A804C267AC759>
61 D<121FEA3FC0EA7FF0487E13FE7F14C08014F86C7F6C13FF6C80000714E00001806C
14FC013F7F6D6D7E0107806D14F0010014FC6E7F021F6D7E6E80020314F06E806E6C13FE
6F7F030F14C06F80030114F86F6C7F7013FF040F807014E00401807014FC053F7F71EBFF
80050714E07114F0050014F87213FC181F84A260187F95B512F8050314F04D14E0051F14
804DEBFE0094B55A4C14F004075C4C1480043F91C7FC4C13FC4BB55A030714E04B5C033F
91C8FC4B5B4AB512F84A5C020F14C04A5C027F49C9FC91B55A010314F04914C0011F5C49
49CAFC90B55A4814F000075C001F14804891CBFC4813FCB55A14E05C91CCFC5B13F86C5A
EA3FC06CCDFC465877E059>I<933803FFC0043F13F84BB512FE03076E7E031F15E0037F
814AB712FC4A82020F825C4A49C6804A01E0011F7F91B5008013074949C76C7F4901F86E
7F4949804901C0157F49496F7E92C9FC4948913907FC1FFC494891383FFF9F4A91B512EF
494849ECFFFE160748495B4A4981485D4A5B4890C7B8FCEFFE0F484849D9F8031480EFE0
004949497F001F4A497F5B94C77E003F4A48804919C04B4880A2007F4B8049133FA24C80
A212FF49137F4C80AD705C6D013F1780127FA2705CA26D011F1700003F6F5CA26F6C4A5A
7F001F6E6C4A5A71133F7F000F6E6D495A6D6D6D495AEFF8036C6C6DD9FE0F5B94B6FC6C
6D6D5D6E6D5D6C6F92C7FC6E6D5C6C6D6D5C040114F06D6C6D5C6E023F13806D6CDA07FC
C8FC6D6C91C8B4FC6F4B13806D6D4B13C06D01F05D6D6D151F6D01FE5D6D6D6C91B5FC6E
01E0010314806E01FE013F14006E90B75A6E17F802035F6E17C06E6C5E031F4BC7FC0307
15F8030115C0DB003F49C8FC040313E04A6B79E959>64 D<001FB812E04817FE48EFFFC0
19F0BA12FC856C727E866C856C8526000FFEC880061F7F06037F1800737E731380190F73
13C0A27313E085A27313F0A21A7FA21BF81A3FA81A7F1BF0A21AFFA24F13E0A2614F13C0
A24F1380193F4F13004F5A1803061F5B95B55A91B95A6262624FC7FC6119F019C04EC8FC
18E04ACCFCB3AF001FB6FC48814881A2B77EA26C5DA26C5D6C92CBFC4D697CE859>80
D<001FBB12F8481AFE5ABDFCA701E0C7D81FFCC71207AD6C48F003FEA2001FC8EE00F8C9
1700B3B3B3AF4AB712C0020716F0A24A82A46E5EA2020116C050697CE859>84
D<91383FFFF80107B67E011F15E0017F15FC90B8FC00038318E048838448839126F0001F
7F02C001017F706C7F171F717F6C4980717F6C90C87E6C486F7FEA003090CA127F85183F
A794B5FC93B6FC151F4AB7FC140F147F49B8FC1307131F017FEDFC3F90B6EAE0004802FC
C7FC4814C04849C8FC4813F84813E048138091C9FC485A5B5B485A5BA76D167F127F6D16
FF6D5D6C6C5D6D150F6C01C0143F02F049B6FC6C01FE011FEDFFE06C90BA12F8A26C1AFC
C617EF6D1687011FEDFE036DDBF80014F8010303E0133FD9007F49C7000713E0020701C0
91C8FC4E4D76CB59>97 D<381FFFFC4813FF5AB67EA47E7E7EEA0003B3A2EF3FF80403B5
FC041F14E0047F14F80381B612FE038381038F16C0039F8203BF8292B87EDDC01F7F9326
FC00037F04F001007F4C800480021F138093C86C13C04B814B6F13E05D7313F04B814BEE
7FF8A24B163F1BFC4B161FA21BFE1A0FA31BFF86AC621BFEA2811A1F1BFC1A3F81F27FF8
811AFF6F17F0616F4B13E06F5D6F4B13C0704A13806104E091B5120070495B04FC01075B
9326FF807F5B94B65A03BF5E039F5E038F5E03874BC7FC03815D6D010015F06D023F14C0
027C010749C8FC91C813E0506A7EE859>I<0303B57E033F14F84AB7FC020716C0021F82
4A16F891B8FC498313074983499038FE00014901F0EB007F4913C092C8FC495A4801F86F
5A485B4A6F5A48496F5AF00180484992C8FC91CCFC485AA25B123F5BA2127F5BA312FF5B
AB7F127FA47F123F7FA26C6C17FE4E7E6C6C4C1380806C7F6E5D6C7F6E4B13006C6D5D6C
6D4B5A6E6C147F6D6D4A5A6D01F813036D9026FF803F5B6D91B65A6D5F6D5F01005F6E4B
C7FC021F5D020715F0020115C0DA003F49C8FC030313E0414D73CB59>I<94380FFFFE4D
6D7E5F4D80A4838383EF0001B3A2ED07FF037F13E00203B512FC020F14FF023F15C14A15
E149B712F94916FD4993B5FC5B4949C6FC4901E0131F490180130790B5C77E4801FC804A
6E7E485B4849814A8148498191C9FC48834982A2485A845B127F5BA312FF5BAC7F127FA2
607F123F607F001F5F7F606C7E6E5D6C6D5DA26C6D92B5FC6E5C6C6D5C6C01FE140F6E5C
6D01C0137F6DD9F803B712F86D90B600FD14FC6D04F914FE6D04F114FF6D16E101001681
6E1501021FDAFC0014FE020702F015FC020002C0013F13F8DB1FFCCAFC506A7AE859>I<
923807FFC0033F13FC4AB67E020715E0021F15F8027F8191B8FC010383498349834949C6
804901F0130F49018001037F90B5C87F02FC157F48496F7E4849151F4A6F7E485B4A6F13
80488391C914C0485A84484818E0A24982127FA24918F0A200FF187FA290BAFCA71AE0A2
1A8001F0CCFCA2127FA37F123F7FA2121F6DEF0F806DEF3FE07E6EEE7FF06C7F6C6D16FF
806C6D4B13E06C6D5D6E4B13C06D6C6C141F6D01E04A13806D01FC49B5FC6D9026FFC01F
14006D91B65A6D5F6D5F6D6C5E6E16C0020F5E02034BC7FC020015F0031F14C0030101F8
C8FC444D76CB59>I<943803FFF0053F13FE4CB61280040715E05E043F15F05E4BB712F8
5D5D4DC6FC4B13E04B49EB7FF094C7FC4CEC3FE04B48EC0F8096C7FC4B5A5EAE001FB912
FC4818FF5ABB1280A46C1900A2001F18FCC8D87FF0C9FCB3B3B20007B9FC001F18C04884
A66C60000795C7FC456A7AE959>I<F2FF80DB07FF020F13F0033F01E0017F13FC4AB5D8
FC01B57E0207DAFF0780021F15CF4A92B712805C49BBFC5B491807DBFE0302F814004990
26F0007F13C04901C0011F6E5A4B6DEC00FC4948C700036D90C7FC4A80017F834A804948
6F7EA24A153FA248844A151FA86E153F6C60A26E157FA26D6C4B5A6E5C013F5F6E5C6D6C
6C010F5B6F5B6D01F0017F5BDBFE03B5C9FC92B7FC495E604916F06060D97FE792CAFC02
C114FCDAC03F13E0030790CBFC92CDFCA480A2806D7E80806DB712E0F0FF806D17F06D17
FE49717E013F18E04918F890BA7E488548854801FCC8003F804801E00300800280161F48
90CA00077F4917014848717F49187F4848851A3F49181F8712FF49180FA66D181FA26C6C
4E5A6D187FA2D83FFE4D485A6D5F6C6D4C5B6C01E0041F5B02F8167F6C01FE4BB55A6CD9
FFE0021F91C7FC6C02FF0103B55A6C92B75A013F18F06D600107188001014DC8FC6D6C16
F8021F16E0020393C9FCDA007F14F8030149CAFC51747BCB59>I<381FFFFC4813FF5AB6
7EA47E7E7EEA0003B3A2EF3FF80403B57E041F14E0047F14F893B67E038315FF03878215
9F03BF8292B87EEFC01F9326FE00037F04F87F04E07F4C6E7E5E93C8123F5D4B824B151F
5DA25DA25DA45DB3B3001FB600F090B71280486F4816C0486F4816E0B76C4816F0A46C4B
6C16E06C4B6C16C06C4B6C168054697EE859>I<ED1F80ED7FE04B7E4A7FA24A7FA66E5B
A26E5B6F5AED1F8092CAFCB00007B612E0001F15F8A24881A47EA21207C8121FB3B3B200
1FB912E04818F04818F819FCBAFCA27E19F86C18F06C18E03E6A72E959>I<001FB612F0
4815FC5AB77EA47E7E7EC8120FB3B3B3B3AD001FBAFC4819804819C0BB12E0A46C19C06C
19806C1900436975E859>108 D<DB07F8EC1FE0D81FFFD93FFFECFFFC007F01C0B5D8C0
0313FFB500C16E488002E7DAF01F8002EF6E488091B65B71B67E17FD6C93B77E001FDAFC
1FECF07FC66CD9F00F9138C03FFCDBC007EC001F4B6C49130FA203005C4A4B804A6D4913
07A24A5DA34A5DA54A5DB3B3A2001FB5D8801F01FE90387FFFF8007FDAE03F6D6CB512FE
B66C4802C114FF93B612C3A47014C16C4A6C028014FE001FDA801F49486C13F8584B80CA
59>I<ED07FE92387FFFE00203B512FC020F14FF023F15C04A8149B712F8498249824982
49D9FC0380499026E0007F7F4990C7000F7F49486E7F02F8140148496E7F48496F7E4A15
3F48496F7EA24890C96C7E4982001F19804982003F19C04982A2007F19E04982A44848EF
7FF0AC6D17FFA2007F19E0A26D5EA2003F19C06D5EA26C6C4C1380A26D5E6C19006E5D6C
6D4B5A6E157F6C6D4B5A6C6D4A5B6E5C6C6D4A5B6D6C6C011F5B6D01E0017F5B6DD9FC03
B55A6D90B7C7FC6D5E6D5E6D5E6D5E023F15C0020F92C8FC020314FCDA007F13E0DB07FE
C9FC444D76CB59>111 D<EF3FF8261FFFFC0103B5FC4801FF011F14E048037F14F8B600
81B612FE038381038F16C0039F826C02BF826C91B87E6CDCC01F7FD800039126FC00037F
04F001007F4C800480021F138093C86C13C04B814B6F13E05D7313F04B814BEE7FF8A24B
163F1BFC4B161FA21BFE1A0FA31BFF86AC621BFEA2811A1F1BFC1A3F81F27FF8811AFF6F
17F0616F4B13E06F5D6F4B13C0704A13806104E091B5120070495B04FC01075B9326FF80
7F5B94B65A03BF5E039F5E038F5E03874BC7FC03815D038015F0043F14C0040749C8FC04
0013E094CAFCB3A9001FB612F048814881B77EA46C5D6C5D6C5D50717ECA59>I<953803
FFC0001FB500F0023F13F84802FC49B512FE480407ECFF80B66C011F15C0057F15E094B7
FC16036C4B16F06C5D6C4BEBFE03C7000F4913E04C13804C48486C13E092B512F84D6D13
C005C0EC7F804DEC0C0094CAFC5EA25E5E5EA25EA25EA25EA293CBFCA55DB3AB001FB812
F848834883BAFCA46C5F6C5F6C5F4C4B7ACA59>114 D<912601FFFEEB0F80023F9039FF
E03FC00103B600FC13E0010FEDFF7F013F16FF90B9FC5A5A5A5A48EC00074801E0EB007F
91C8121FD87FFC8149814981484881A24981A57F6C6CEE7FC06DEE3F806D93C7FC6CB4FC
14C06C13FC6CEBFFF06CECFFC06C15FE6CEDFFF06C6C15FE6DEDFFC0010F16F0010182D9
003F15FE020381DA000F15C0DB003F14E0040114F0EE001F050313F8050013FCD81F8016
7FD87FC0EE3FFE6D161F00FF170FF007FF847FA27FA27FA26D5E6D17FE180F6E151F6EED
3FFC6E157F02F8913801FFF802FE140FDAFFE090B512F092B712E0A21980190001C75E01
C316F8018016E0023F1580007F010702FCC7FC003EC76C1380404D73CB59>I<157C15FF
5C4A7FB2001FBA12804819E05ABB12F0A46C19E0A2001F1980C700030180C9FCB3B2F101
F0F107FCA2F10FFEA8191F7015FC6E163F70147F70ECFFF86E6D5B70010713F092397FFF
801F94B612E06F16C01A806F16006F5D030315F86F5D6F6C14C0040F49C7FC040113E047
607CDE59>I<261FFFFC92B512E04801FF4A14F8485EB66C4980A46C826C826C82D80003
EE001FB3B3A7193FA2197FA219FF606F5C6D5E6F5C6F143F6D01FC91B5FC9226FF800F91
B512806E90B912C01CE06E19F019DF020F169F6EEDFE1F6EDBF80F14E0020003E015C003
1FDA00031480030101F090C9FC544B7EC959>I<001FB500FC023FB512F84802FF91B612
FC486F4815FEB717FFA46C1AFE6C92C715FC6C02FC023F14F826000FFCC9383FF000A26E
167F010760A26E16FF6D60A26F5C6D60A26F5C6D95C7FCA26F5C027F5EA26F140FA2023F
5E6F141FA2021F5E6F143FA2020F5E6F147FA202075E6F14FFA26E5E705AA26E5E705AA2
6E93C8FC705AA2037F5CEEF00FA2033F5CEEF81FA2031F5CEEFC3FA2030F5CEEFE7FA203
075C93B5FCA26F5CA36F5CA36F91C9FC705A705A705A504B7CC959>I<001FB500FC020F
B512FE007F02FF023FECFF80B718C0705BA493C77E6C1B80001F02FC020FECFE00C601C0
CA13C0A36D6C4C5BA56E5E013F96C7FCA56E5E011F60A56ED903F0130F010FDA0FFC5C4C
7E4C7EA36E49EB801F010760A293B512C0A2173F6D6C4C5A4B14E0A34B14F0A26DDAFE1F
5C0383157F038714F8A3EEFC0F6D018F02FC5BA203CF15FFEEF807A203DF80027FD9F003
5CA303FF91B5FC4C7E6E94C8FCA24C7EA46E496D5A93C7123F6E486E5ADA03FCEC0FF052
4B7DC959>I E
%EndDVIPSBitmapFont
/Fk 107[73 73 24[73 83 83 119 83 83 46 64 55 1[83 83
83 129 46 83 1[46 83 83 55 73 83 73 83 73 3[55 1[55 4[119
119 101 92 2[92 1[119 147 101 3[119 119 92 1[119 110
110 119 152 5[46 83 83 6[83 1[46 41 55 41 2[55 55 36[92
92 2[{TeXBase1Encoding ReEncodeFont}56 165.272 /Times-Roman
rf /Fl 105[83 28[83 83 119 83 92 55 64 73 1[92 83 92
138 46 2[46 92 83 55 73 92 73 1[83 12[110 92 2[101 129
119 1[110 3[129 129 101 110 119 1[110 119 14[83 4[55
41 41[92 2[{TeXBase1Encoding ReEncodeFont}39 165.272
/Times-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 @landscape
%%EndSetup
%%Page: 1 1
1 0 bop Black Black Black Black Black Blue 784 552 a
Fl(Extending)41 b(the)g(TPTP)h(Language)f(to)f(Higher)-6
b(-Order)42 b(Logic)1459 784 y(with)f(A)-8 b(utomated)41
b(P)n(arser)i(Generation)p Black Red 2018 1100 a(System)f(Description)p
Black Blue 1020 1457 a Fk(Allen)f(V)-18 b(an)42 b(Gelder)p
Black Blue 1132 w(Geof)l(f)g(Sutclif)l(fe)p Black 579
1656 a(Computer)e(Science)j(Department)166 b(Computer)40
b(Science)j(Department)807 1856 y(Uni)l(v)n(ersity)e(of)g(California)
737 b(Uni)l(v)n(ersity)40 b(of)h(Miami)870 2055 y(Santa)h(Cruz,)g(CA,)g
(USA)912 b(Miami,)42 b(FL,)f(USA)p Blue 933 2420 a Fj(avg@cs.ucsc.edu)p
Black Blue 737 w(geoff@cs.miami.e)o(du)p Black Blue 2
3113 a(http://www.cse.u)o(csc)o(.e)o(du/)o Fi(\030)p
Fj(a)o(vg/)o(TP)o(TPp)o(ar)o(ser)o(/)p Black Blue 2 3594
a(http://www.cs.mi)o(ami)o(.e)o(du/)o Fi(\030)p Fj(t)o(ptp)o(/)p
Black Black Black eop
%%Page: 2 2
2 1 bop Black Black Blue 2 200 a Fl(Ov)n(er)n(view)42
b(of)f(the)h(System)f(to)g(Ev)n(aluate)g(a)g(Pr)m(oposed)g(HO)-7
b(TPTP)42 b(Language)p Black 2 4294 a
 currentpoint currentpoint translate 1.7 1.7 scale neg exch neg exch
translate
 2 4294 a @beginspecial
71 @llx 440 @lly 431 @urx 721 @ury 3600 @rwi @setspecial
%%BeginDocument: sysfig.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: tmp__pst.dvi
%%BoundingBox: 71 440 431 721
%%DocumentFonts: Times-Italic Times-Roman
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E tmp__pst -o sysfig.eps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.08.06:1347
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro
%!
% PostScript prologue for pst-coil.tex.
% Version 97 patch 1, 98/06/02
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { /t ED t sin AspectSin mul t 180 div AspectCos mul add t cos
lineto } def
/Coil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /ArmB ED /ArmA ED
/h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED x0 y0 translate y1 y0 sub x1 x0
sub 2 copy Pyth /TotalLength ED Atan rotate /BeginAngle ArmA AspectCos
Div w h mul Div 360 mul def /EndAngle TotalLength ArmB sub AspectCos Div
w h mul Div 360 mul def 1 0 0 0 ArrowA ArmA 0 lineto /mtrx CM def w h
mul 2 Div w 2 Div scale BeginAngle Inc EndAngle { CoilLoop } for
EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
TotalLength 0 ArrowB lineto
pop pop pop pop } def
% DG/SR modification end
/AltCoil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /h ED /w ED
/EndAngle ED /BeginAngle ED /mtrx CM def w h mul 2 Div w 2 Div scale
BeginAngle sin AspectSin mul BeginAngle 180 div AspectCos mul add
BeginAngle cos /lineto load stopped { moveto } if BeginAngle Inc
EndAngle { CoilLoop } for EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { /ArmB ED /ArmA ED 2 div /w ED w mul /h ED /y1 ED /x1 ED /y0 ED
/x0 ED x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth /TotalLength ED
Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
sub 2 div dup ArmA add /ArmA ED ArmB add /ArmB ED /x ArmB h 2 div add
def mark 0 0 ArmB 0 n { x w /w w neg def /x x h add def } repeat
TotalLength ArmA sub 0 TotalLength 0 } def
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (tmp__pst.dvi)
@start /Fa 134[42 42 60 1[42 23 32 28 1[42 42 42 65 23
2[23 42 42 28 37 42 37 42 37 12[51 46 2[46 60 60 1[51
2[28 60 1[46 51 60 55 55 15[42 5[21 2[28 28 37[46 2[{
TeXBase1Encoding ReEncodeFont}39 83.022 /Times-Roman
rf /Fb 136[55 37 42 1[32 3[42 42 60 3[23 42 42 1[37 42
37 1[42 14[51 5[46 3[60 3[60 22[28 45[{TeXBase1Encoding ReEncodeFont}19
83.022 /Times-Italic rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
1 0 bop 0 2325 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 2325 a 0 2325 2985 2325 v 2985 2325
a
 currentpoint grestore moveto
 2985 2325 a 511 154 a
 tx@Dict begin tx@NodeDict begin {14.5 9.5 51.7999 25.89995 2.5 } false
/N@sky 16 {InitRnode } NewNode end end
 511 154 a 1 0 0 TeXcolorrgb 609
103 a Fb(Design)561 203 y(Langua)o(g)o(e)p Black 443
552 a
 tx@Dict begin tx@NodeDict begin {16.5 11.5 68.21931 34.10965 2.5 }
false /N@root 16 {InitRnode } NewNode end end
 443 552 a 17 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0. true 2.0 neg 11.5
neg 66.21931 16.5 .5 Frame  gsave 1.0 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
510 501 a Fa(Speci\002cation)582 601 y(in)21 b(BNF2)726
332 y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@sky /N@root InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 912 951 a
 tx@Dict begin tx@NodeDict begin {16.5 11.5 51.38976 25.69487 2.5 }
false /N@yacc 16 {InitRnode } NewNode end end
 912 951 a 16 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0. true 2.0 neg 11.5
neg 49.38976 16.5 .5 Frame  gsave 1.0 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial 979 900 a Fa(Inputs)e(to)978
1000 y(le)o(x,)h(yacc)726 332 y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@root /N@yacc InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332 a
 tx@Dict begin tx@NodeDict begin /t 0.95 def LPut end PutBegin  end
 726
332 a 726 332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 44.2193 14.5
9.5 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 726 332 a 510 302 a Fa(translation)577
402 y(scripts)726 332 y
 tx@Dict begin PutEnd  end
 726 332 a 726 332 a
 tx@Dict begin PutEnd  end
 726 332 a
1304 1349 a
 tx@Dict begin tx@NodeDict begin {16.5 11.5 52.9397 26.46985 2.5 }
false /N@ccode 16 {InitRnode } NewNode end end
 1304 1349 a 16 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0. true 2.0 neg 11.5
neg 50.9397 16.5 .5 Frame  gsave 1.0 SLW 0  setgray 0 setlinecap stroke
 grestore end


@endspecial 1408 1298 a Fa(Source)1370 1398 y(Code)g(\(C\))726
332 y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@yacc /N@ccode InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 726 332 a 726 332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 35.38976 6.81989
2.16492 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 726 332
a 580 351 a Fa(yacc,)f(le)o(x)726 332 y
 tx@Dict begin PutEnd  end
 726 332 a 726
332 a
 tx@Dict begin PutEnd  end
 726 332 a 726 332 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ccode /N@root InitNC { yB yA sub xB xA sub Atan dup -100.  add
/AngleA ED -100.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if
end gsave 1.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 726 332 a 1672 1748 a
 tx@Dict begin tx@NodeDict begin {16.5 11.5 60.27963 30.13982 2.5 }
false /N@parser 16 {InitRnode } NewNode end end
 1672
1748 a 16 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0. true 2.0 neg 11.5
neg 58.27963 16.5 .5 Frame  gsave 1.0 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial 1738
1697 a Fa(Ex)o(ecutable)1819 1797 y(P)o(arser)726 332
y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@ccode /N@parser InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 726 332 a 726 332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 32.21956 6.81989
2.16492 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 726 332 a 593
351 a Fa(compile)726 332 y
 tx@Dict begin PutEnd  end
 726 332 a 726 332 a
 tx@Dict begin PutEnd  end
 726 332
a 156 951 a
 tx@Dict begin tx@NodeDict begin {14.5 9.5 41.43994 20.71997 2.5 }
false /N@human 16 {InitRnode } NewNode end end
 156 951 a 1 0 0 TeXcolorrgb 206 900 a Fb(Human)209
1000 y(Re)o(vie)o(w)p Black 726 332 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@root /N@human InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332
a
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@human /N@root InitNC { yB yA sub xB xA sub Atan dup 60.  add
/AngleA ED 60.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end
gsave 1.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332 a
 tx@Dict begin tx@NodeDict begin /t 0.5 def LPut end PutBegin  end
 726 332 a 726 332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 25.94969 6.56494
0.17992 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 726 332 a 1 0 0
TeXcolorrgb 619 359 a Fb(Re)o(vise)p Black 726 332 a
 tx@Dict begin PutEnd  end

726 332 a 726 332 a
 tx@Dict begin PutEnd  end
 726 332 a 489 1548 a
 tx@Dict begin tx@NodeDict begin {28.5 23.5 57.10933 28.55466 2.5 }
false /N@prolog 16 {InitRnode } NewNode end end
 489 1548 a 17
w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0. true 2.0 neg 23.5
neg 55.10933 28.5 .5 Frame  gsave 1.0 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial 616 1398 a Fa(Prolog)623
1498 y(P)o(arser)653 1597 y(with)556 1697 y(Semantics)726
332 y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@root /N@prolog InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332 a
 tx@Dict begin tx@NodeDict begin /t 0.8 def LPut end PutBegin  end
 726 332 a 726 332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 42.20984 6.8449
0.14496 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 726 332
a 1 0 0 TeXcolorrgb 551 360 a Fb(hand-code)p Black 726
332 a
 tx@Dict begin PutEnd  end
 726 332 a 726 332 a
 tx@Dict begin PutEnd  end
 726 332 a 726 332 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@prolog /N@root InitNC { yB yA sub xB xA sub Atan dup 30.  add
/AngleA ED 30.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if end
gsave 1.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 726 332
a 726 332 a
 tx@Dict begin tx@NodeDict begin /t 0.2 def LPut end PutBegin  end
 726 332 a 726 332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 55.93944 6.68
1.40991 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 726 332 a 494 354 a Fa(Errors,)p
1 0 0 TeXcolorrgb 19 w Fb(Re)o(vise)p Black 726 332 a
 tx@Dict begin PutEnd  end

726 332 a 726 332 a
 tx@Dict begin PutEnd  end
 726 332 a 1272 2146 a
 tx@Dict begin tx@NodeDict begin {20.5 15.5 108.50923 54.25461 2.5
} false /N@test 16 {InitRnode } NewNode end end
 1272 2146 a
1322 2046 a Fa(T)-6 b(est)21 b(on)f(HOL)g(Examples,)1483
2145 y(TPTP)h(Library)-5 b(,)1421 2245 y(and)19 b(TSTP)i(Library)726
332 y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@parser /N@test InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 726 332 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@prolog /N@test InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 726 332 a 2496 2146 a
 tx@Dict begin tx@NodeDict begin {16.5 11.5 53.7898 26.8949 2.5 } false
/N@done 16 {InitRnode } NewNode end end
 2496
2146 a 16 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.0 SLW 0  setgray  0. true 2.0 neg 11.5
neg 51.7898 16.5 .5 Frame  gsave 1.0 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial 2604
2095 a Fa(DONE)2562 2195 y(\(for)e(no)n(w\))726 332 y
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@test /N@done InitNC { NCLine  } if end gsave 1.0 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end

726 332 a 726 332 a
 tx@Dict begin gsave STV newpath 1.0 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1. 4.0 1.2 Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@test /N@root InitNC { yB yA sub xB xA sub Atan dup -100.  add
/AngleA ED -100.  sub 180 add /AngleB ED 0.67  0.67  NCCurve  } if
end gsave 1.0 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 726 332 a 726 332 a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 726 332 a 726
332 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 55.93944 6.68
1.40991 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 726 332 a 494 354 a Fa(Errors,)p 1 0 0 TeXcolorrgb
19 w Fb(Re)o(vise)p Black 726 332 a
 tx@Dict begin PutEnd  end
 726 332 a 726 332
a
 tx@Dict begin PutEnd  end
 726 332 a eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
 @endspecial 2 4294 a
 currentpoint currentpoint translate 1 1.7 div 1 1.7 div scale neg
exch neg exch translate
 2 4294 a 2991 491 a Fg(Human)34
b(acti)m(vities)i(are)e(sho)m(wn)g(in)p Red 35 w Ff(italics)p
Black Fg(.)p Black Black eop
%%Page: 3 3
3 2 bop Black Black Blue 2 239 a Fl(BNF2)41 b(\226)g(A)h(T)-12
b(w)n(o-Le)n(v)n(el)42 b(Speci\002cation)f(Language)p
Black 2 679 a Fk(T)-6 b(raditional)41 b(BNF)h(\(Backus-Naur)g(F)n
(orm\))e(has)i(one)e(syntax)h(for)g(all)h(grammar)f(symbols.)2
1052 y(Modern)f(practice)j(uses)f(tw)n(o)f(le)l(v)n(els)h(of)e(symbols)
210 1251 y Fi(\017)p Red 41 w Fe(tok)n(ens)p Black 42
w Fk(are)i(de\002ned)f(by)f(re)n(gular)h(e)n(xpressions,)h(and)334
1451 y(are)g(treated)g(as)g(terminal)f(symbols)f(in)h(the)h(conte)n
(xt-free)f(part)g(of)g(the)g(grammar)-9 b(.)210 1650
y Fi(\017)p Red 41 w Fe(gr)n(ammar)41 b(symbols)p Black
42 w Fk(are)h(the)f(nonterminal)f(symbols)g(of)h(the)h(conte)n(xt-free)
f(grammar)-9 b(.)p Black Black 1552 2314 a Fd(<TPTP)73
b(input>)220 b(::=)74 b(<annotated)e(formula>)g(|)i(<comment>)1552
2464 y(<nonassoc)e(op>)147 b(::=)74 b(<=>)f(|)h(=>)f(|)h(<=)f(|)h(<~>)
1552 2613 y(<formula)e(role>)h(::=)h(<lower)e(word>)1552
2912 y(<formula)g(role>)h(:==)h(axiom)f(|)g(conjecture)f(|)i(lemma)f(|)
2955 3061 y(theorem)f(|)i(negated_conjecture)1552 3360
y(<lower)f(word>)220 b(::-)74 b(<lower><alphanum>*)1552
3659 y(<lower>)589 b(:::)74 b([a-z])1552 3808 y(<alphanum>)367
b(:::)74 b([A-Za-z0-9_])p Blue 131 1914 a Fe(Meta-)p
Black Red 212 w(Rule)p Black Blue 85 2113 a(Symbol)p
Black Red 166 w(T)-12 b(ype)p Black 490 w(Examples)42
b Fk(\(some)f(are)h(simpli\002ed)f(from)f(the)i(TPTP)f(language\))p
2 2177 5378 5 v Blue 195 2318 a Fj(::=)p Black Red 276
w Fk(Grammar)p Black Blue 195 2915 a Fj(:==)p Black Red
276 w Fk(Semantic)p Black Blue 195 3364 a Fj(::-)p Black
Red 276 w Fk(T)-13 b(ok)n(en)p Black Blue 195 3663 a
Fj(::=)p Black Red 276 w Fk(Macro)p Black 2 3859 V Black
Black eop
%%Page: 4 4
4 3 bop Black Black Blue 2 175 a Fl(Pr)m(oposed)41 b(HO)-7
b(TPTP)42 b(Syntax,)e(Extending)h(TPTP)g(to)g(Higher)-6
b(-Order)42 b(Logic)p Black 2 626 a Fk(Ne)l(w)g(operators)f(continue)g
(TPTP)g(tradition)f(that)h(operators)h(are)g(logical)f(symbols:)210
828 y Fi(\017)g Fk(Lambda)g(abstraction:)p WildStrawberry
1766 878 a Fc(^)p Black 2000 828 a Fk(\(synon)n(ym)p
WildStrawberry 39 w Fj(lambda)p Black Fk(\))210 1030
y Fi(\017)g Fk(Function)f(application:)p WildStrawberry
51 w Fj(@)p Black 210 1232 a Fi(\017)h Fk(\223Maps)h(to\224)f(for)g
(types:)p WildStrawberry 51 w Fj(->)p Black 91 w Fk(\(synon)n(ym)p
WildStrawberry 38 w Fj(>)p Black Fk(\))210 1433 y Fi(\017)g
Fk(\223De\002ned)h(as\224:)p WildStrawberry 497 w Fj(:=)p
Black 91 w Fk(\(Hudak)f([1989])f(uses)i Fi(\021)e Fk(which)h(looks)g
(re\003e)n(xi)l(v)n(e.\))2 1815 y(Colon)f(operator)h(\()p
WildStrawberry Fj(:)p Black Fk(\))51 b(has)42 b(se)l(v)n(eral)f(ne)l(w)
h(meanings.)p Blue Blue Blue 2 2036 a Fd(hof\(1,)73 b(definition,)297
2186 y(set_union)f(:=)i(lambda)f([A:)g($type]:)f(lambda)h([D:)g
(\(\(A->)g($o\)->)g($o\),)g(X:)h(A]:)1257 2336 y(?)f([S:)h(\(A->)f
($o\)]:)g(\()g(\(D)h(@)g(S\))f(&)h(\(S)f(@)h(X\))f(\))h(\).)p
Black 2 2718 a Fk(The)41 b(lambda)g(e)n(xpression)g(sho)l(wn)f(is:)p
WildStrawberry 2 2920 a Fh(l)p Black Fe(A)p WildStrawberry
Fk(:)p Black -1 w Fh(t)p Fb(:)p WildStrawberry 55 w Fh(l)p
Black Fe(D)p WildStrawberry Fk(:)p Black Fa(\(\()p Fe(A)p
WildStrawberry Fi(!)p Black Fe(o)p Fa(\))p WildStrawberry
Fi(!)p Black Fe(o)p Fa(\))p Fb(:)p WildStrawberry 55
w Fh(l)p Black Fe(X)p WildStrawberry 16 w Fk(:)p Black
-1 w Fe(A)p Fb(:)55 b Fi(9)p Fe(S)p WildStrawberry 1
w Fk(:)p Black Fa(\()p Fe(A)p WildStrawberry Fi(!)p Black
Fe(o)p Fa(\))p Fb(:)g Fa(\(\()p Fe(D)p WildStrawberry
42 w Fk(@)p Black 41 w Fe(S)q Fa(\))42 b Fi(^)f Fa(\()p
Fe(S)p WildStrawberry 42 w Fk(@)p Black 42 w Fe(X)16
b Fa(\)\))p Fk(.)2 3302 y(More)41 b(details)h(and)f(e)n(xamples)g(at)p
Blue 42 w(http://www)-11 b(.cse.ucsc.edu/)p Fi(\030)p
Fk(a)m(vg/TPTPparser/)p Black(.)2 3684 y(T)e(o)40 b(be)i(discussed)g
(at)p Blue 41 w(TPTP)f(T)-12 b(ea)43 b(P)n(arty)p Black(.)p
Black Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
