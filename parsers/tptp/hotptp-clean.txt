/*----v3.2.0.5 (TPTP version.internal development number) */
/*------------------------------------------------------------------------------ */
/*----README ... this header provides important meta- and usage information */
/*---- */
/*----Intended uses of the various parts of the TPTP syntax are explained */
/*----in the TPTP technical manual, linked from www.tptp.org. */
/*---- */
/*----Four kinds of separators are used, to indicate different types of rules: */
/*----  ::= is used for regular grammar rules, for syntactic parsing. */
/*----  :== is used for semantic grammar rules. These define specific values */
/*----      that make semantic sense when more general syntactic rules apply. */
/*----  ::- is used for rules that produce tokens. */
/*----  ::: is used for rules that define character classes used in the */
/*----       construction of tokens. */
/*---- */
/*----White space may occur between any two tokens. White space is not specified */
/*----in the grammar, but there are some restrictions to ensure that the grammar  */
/*----is compatible with standard Prolog: a <TPTP_file> should be readable with  */
/*----read/1. */
/*---- */
/*----The syntax of comments is defined by the <comment> rule. Comments may  */
/*----occur between any two tokens, but do not act as white space. Comments  */
/*----will normally be discarded at the lexical level, but may be processed  */
/*----by systems that understand them (e.g., if the system comment convention  */
/*----is followed).  */
/*------------------------------------------------------------------------------ */
/*----Files. Empty file is OK. */
<TPTP_file>          ::= <TPTP_input>*
<TPTP_input>         ::= <annotated_formula> | <include>

/*----Formula records */
<annotated_formula>  ::= <fof_annotated> | <cnf_annotated> |
                         <thf_annotated> | <tff_annotated>
/*----Future languages may include ...  english | efof | tfof | mathml | ... */
<fof_annotated>      ::= fof(<name>,<formula_role>,<fof_formula><annotations>).
<cnf_annotated>      ::= cnf(<name>,<formula_role>,<cnf_formula><annotations>).
<thf_annotated>      ::= thf(<name>,<formula_role>,<thf_formula><annotations>).
<tff_annotated>      ::= tff(<name>,<formula_role>,<tff_formula><annotations>).
<annotations>        ::= <null> | ,<source><optional_info>
/*----In derivations the annotated formulae names must be unique, so that */
/*----parent references (see <inference_record>) are unambiguous.  */

/*----Types for problems. */
/*----Note: The previous <source_type> from ... */
/*----   <formula_role> ::= <user_role>-<source>  */
/*----... is now gone. Parsers may choose to be tolerant of it for backwards  */
/*----compatibility. */
<formula_role>       ::= <lower_word>
<formula_role>       :== axiom | hypothesis | definition | lemma | theorem |
                         conjecture | lemma_conjecture | negated_conjecture |
                         plain | fi_domain | fi_functors | fi_predicates |
                         type | unknown
/*----"axiom"s are accepted, without proof, as a basis for proving "conjecture"s  */
/*----and "lemma_conjecture"s in FOF problems. In CNF problems "axiom"s are  */
/*----accepted as part of the set whose satisfiability has to be established. */
/*----There is no guarantee that the axioms of a problem are consistent. */
/*----"hypothesis"s are assumed to be true for a particular problem, and are  */
/*----used like "axiom"s. */
/*----"definition"s are used to define symbols, and are used like "axiom"s. */
/*----See <thf_definition> for details of thf usage. */
/*----"lemma"s and "theorem"s have been proven from the "axiom"s, can be used  */
/*----like "axiom"s, but are redundant wrt the "axiom"s. "lemma" is used as the  */
/*----role of proven "lemma_conjecture"s, and "theorem" is used as the role of  */
/*----proven "conjecture"s, in output. A problem containing a "lemma" or  */
/*----"theorem" that is not redundant wrt the "axiom"s is ill-formed. "theorem"s */
/*----are more important than "lemma"s from the user perspective. */
/*----"conjecture"s occur in only FOF problems, and all are to be proven from  */
/*----the "axiom"(-like) formulae. A problem is solved only when all  */
/*----"conjecture"s are proven. */
/*----"lemma_conjecture"s are expected to be provable, and may be useful to  */
/*----prove, while proving "conjecture"s. */
/*----"negated_conjecture"s occur in only CNF problems, and are formed from */
/*----negation of a "conjecture" in a FOF to CNF conversion. */
/*----"plain"s have no special user semantics, and can be used like "axiom"s. */
/*----"fi_domain", "fi_functors", and "fi_predicates" are used to record the */
/*----domain, interpretation of functors, and interpretation of predicates, for */
/*----a finite interpretation. */
/*----"type" defines the type globally for one symbol; treat as $true. */
/*----"unknown"s have unknown role, and this is an error situation. */

/*----START FOF --------------------------------------------------------------- */
/*----FOF formulae. All formulae must be closed. */
<fof_formula>        ::= <binary_formula> | <unitary_formula>
<binary_formula>     ::= <nonassoc_binary> | <assoc_binary>
/*----Only some binary connectives are associative */
/*----There's no precedence among binary connectives */
<nonassoc_binary>    ::= <unitary_formula> <binary_connective> <unitary_formula>
<binary_connective>  ::= <=> | => | <= | <~> | ~<vline> | ~&
/*----Associative connectives & and | are in <assoc_binary> */
<assoc_binary>       ::= <or_formula> | <and_formula>
<or_formula>         ::= <unitary_formula> <vline> <unitary_formula>
                         <more_or_formula>*
<more_or_formula>    ::= <vline> <unitary_formula>
<and_formula>        ::= <unitary_formula> & <unitary_formula>
                         <more_and_formula>*
<more_and_formula>   ::= & <unitary_formula>
<assoc_connective>   ::= <vline> | &
/*----<unitary_formula> are in ()s or do not have a <binary_connective> at the  */
/*----top level. */
<unitary_formula>    ::= <quantified_formula> | <unary_formula> |
                         <atomic_formula> | (<fof_formula>) 
<quantified_formula> ::= <quantifier> [<variable_list>] : <unitary_formula>
<quantifier>         ::= ! | ?
/*----! is universal quantification and ? is existential. Syntactically, the  */
/*----quantification is the left operand of :, and the <unitary_formula> is  */
/*----the right operand. Although : is a binary operator syntactically, it is  */
/*----not a <binary_connective>, and thus a <quantified_formula> is a  */
/*----<unitary_formula>. */
/*----Universal   example: ! [X,Y] : ((p(X) & p(Y)) => q(X,Y)). */
/*----Existential example: ? [X,Y] : (p(X) & p(Y)) & ~ q(X,Y). */
/*----Quantifiers have higher precedence than binary connectives, so in */
/*----the existential example the quantifier applies to only (p(X) & p(Y)). */
<variable_list>      ::= <variable> | <variable>,<variable_list>
/*----Future variables may have sorts and existential counting */
/*----Unary connectives bind more tightly than binary */
<unary_formula>      ::= <unary_connective> <unitary_formula>
<unary_connective>   ::= ~

/*---- END FOF --------------------------------- */

/*----CNF formulae (variables implicitly universally quantified) */
<cnf_formula>        ::= (<disjunction>) | <disjunction>
<disjunction>        ::= <literal> <more_disjunction>*
<more_disjunction>   ::= <vline> <literal>
<literal>            ::= <atomic_formula> | ~ <atomic_formula>

/*---- END CNF --------------------------------- */

/*---- START THF --------------------------------------------------------------- */
/*----THF formulae. All formulae must be closed. */
<thf_formula>        ::= <thf_binary_formula> | <thf_unitary_formula> |
                         <thf_definition>
<thf_binary_formula> ::= <thf_nonassoc_formula> | <thf_assoc_formula> | 
                         <thf_apply_formula> | <thf_equality> |
                         <thf_binary_type>
/*----Only some binary connectives are associative */
/*----There's no precedence among binary connectives */
<thf_nonassoc_formula> ::= <thf_unitary_formula> <binary_connective> 
                           <thf_unitary_formula>
<thf_equality>       ::= <thf_unitary_formula> = <thf_unitary_formula>
/*----Associative connectives & and | are in <assoc_formula>. */
/*----For thf, these are left-associative to simplify the translation to */
/*----their corresponding lambda expressions. */
/*----E.g., (U & W & Y) becomes ^ [U,W,Y]: (U @ W @ $false @ Y @ $false). */
/*----and   (U | W | Y) becomes ^ [U,W,Y]: (U @ $true @ W @ $true @ Y). */
<thf_assoc_formula>  ::= <thf_or_formula> | <thf_and_formula>
<thf_or_formula>     ::= <thf_unitary_formula> <vline> <thf_unitary_formula> |
                         <thf_or_formula> <vline> <thf_unitary_formula>
<thf_and_formula>    ::= <thf_unitary_formula> & <thf_unitary_formula> |
                         <thf_and_formula> & <thf_unitary_formula>
/*----<thf_unitary_formula> are in ()s or do not have a <binary_connective>  */
/*----at the top level.  Essentially, a <thf_unitary_formula> is any */
/*----lambda expression that "has enough parentheses" to be used inside */
/*----a larger lambda expression.  However, lambda notation might not be used. */
<thf_unitary_formula> ::= <thf_atom> | <thf_let_rec> |
                          <thf_abstraction> | <thf_unary_formula> |
                          <thf_quantified_formula> | ( <thf_tuple> ) |
                          ( <thf_binary_formula> ) | ( <thf_unitary_formula> )
<thf_quantified_formula> ::= <thf_quantifier> [<thf_variable_list>] : 
                             <thf_unitary_formula>
<thf_quantifier>     ::= ! | ?
<thf_variable_list>  ::= <thf_variable> | <thf_variable> , <thf_variable_list>

/*----Unary connectives bind more tightly than binary */
<thf_unary_formula>  ::= <unary_connective> <thf_unitary_formula>

/*----@ (denoting apply) is left-associative and lambda is right-associative. */
/*----lambda [X] : lambda [Y] : f @ g (where f is a <thf_apply_formula> */
/*----and g is a <thf_unitary_formula>) should be parsed as: */
/*----(lambda [X] : (lambda [Y] : f)) @ g. */
/*----That is, g is not in the scope of either lambda. */

<thf_abstraction>    ::= <thf_lambda> [<thf_variable_list>] : 
                         <thf_unitary_formula>
<thf_lambda>         ::= lambda | ^

<thf_apply_formula>  ::= <thf_apply_formula> @ <thf_unitary_formula> |
                         <thf_unitary_formula> @ <thf_unitary_formula>

/*----thf_tuple is really the "pair" function of lambda calculus, so it */
/*----should be right-associative.  It is also "cons" in Lisp. */
/*----So "(U, V)" is "syntactic sugar" for "lambda [X]: (X @ U @ V)". */
/*----Some useful functions to work with tuples might be: */
/*----"first := lambda [E]: (E @ lambda [F, R]: F)" and */
/*----"rest  := lambda [E]: (E @ lambda [F, R]: R)". */
/*----Then "(first @ (U, V)) = U" and "(rest @ (U, V)) = V" are valid. */
/*----thf_tuple is not a <binary_formula> because it would confuse Prolog */
/*----if it appeared at top level without parentheses. */
<thf_tuple>          ::= <thf_unitary_formula> , <thf_tuple> |
                         <thf_unitary_formula> , <thf_unitary_formula>

<thf_atom>           ::= <thf_typed_atom> | <thf_untyped_atom>
<thf_typed_atom>     ::= <thf_typed_constant> | <thf_typed_variable>
<thf_untyped_atom>   ::= <thf_untyped_constant> | <thf_untyped_variable>
<thf_variable>       ::= <thf_untyped_variable> | <thf_typed_variable>
<thf_typed_variable> ::= <thf_untyped_variable> : <thf_unitary_type>
<thf_untyped_variable> ::= <variable>

/*----If the entire formula is a <thf_typed_constant>, it should be treated */
/*----as an assertion that the constant is in this type, globally. */
/*----If a <thf_typed_constant> appears inside a larger expression, */
/*----it is presently unspecified what the scope of this type declaration is. */
/*----Users producing such formulas should be sure to clarify their intent; */
/*----ad-hoc polymorphism and subtyping are two of several possibilities. */
/*----Note: "defined" means a word starting with one $ and "system" means $$. */
<thf_typed_constant> ::= <thf_untyped_constant> : <thf_unitary_type>
<thf_untyped_constant> ::= <atomic_word> | <number> | <distinct_object> |
                           <atomic_system_word> | <thf_defined_word> |
                           ( <tptp_operator> )
<thf_defined_word>   ::= <defined_type> | <defined_prop>
<tptp_operator>      ::= <unary_connective> | <binary_connective> |
                         <assoc_connective> | <quantifier> | =

/*----<thf_unitary_type> appears after ":", where a type is being specified */
/*----for a constant or variable (or other expression, in the future), */
/*----or within a larger <thf_binary_type>. */
/*----However, this is just for "readability", and <thf_unitary_type> */
/*----expands simply to <thf_unitary_formula>, so the syntax allows */
/*----just about any lambda expression with "enough" parentheses to serve */
/*----as a type.  HOWEVER, the expected use of this flexibility is */
/*----parametric polymorphism in types, expressed with lambda abstraction: */
/*----  list := ^ [T]: ((T * (list @ T)) + (emptylist @ T)) */
/*----  ! [L : (list @ int)]: letrec [sum := ^ [L1]: ...] : <expr_in_L_and sum>. */
/*----If a <thf_unitary_type> that "looks like" a type appears in the */
/*----"function position" of an apply formula, it is */
/*----considered to be a function into bool that is true exactly when its */
/*----parameter is of the type denoted by the <thf_unitary_type>. */
/*----E.g., ((nat -> nat) @ fibonacci) might evaluate to $true. */
/*----<map_arrow> is right-associative: o->o->o means o->(o->o). */
/*----<star> is left-associative: o * o * o means (o * o) * o. */
/*----<plus> is left-associative: o + o + o means (o + o) + o. */
/*----We cannot use <vline> for union because of conflict with "or formula". */
<thf_binary_type>    ::= <thf_mapping_type> | <thf_xprod_type> |
                         <thf_union_type>
<thf_mapping_type>   ::= <thf_unitary_type> <map_arrow> <thf_mapping_type> |
                         <thf_unitary_type> <map_arrow> <thf_unitary_type>
<thf_xprod_type>     ::= <thf_xprod_type> <star> <thf_unitary_type> |
                         <thf_unitary_type> <star> <thf_unitary_type>
<thf_union_type>     ::= <thf_union_type> <plus> <thf_unitary_type> |
                         <thf_unitary_type> <plus> <thf_unitary_type>
<thf_unitary_type>   ::= <thf_unitary_formula>
<map_arrow>          ::= -> | >

/*----<thf_definition> and <thf_let_rec>. */
/*----As a formula, a <thf_definition> evaluates to true. */
/*----If "name := expr" is the entire formula, it has global scope, i.e., the */
/*----entire input (to be consistent with the principle that the order of */
/*----formulas within the input is immaterial). */
/*----The symbol := is considered punctuation, so parentheses are not required */
/*----(colon (:) also is considered punctuation). */
/*----Primary expected use is as a <thf_let_rec>, such as */
/*----"letrec [name1 := expr1, name2 := expr2, ...] : formula", */
/*----where the symbols "name1", "name2", ... normally appear in "formula", */
/*----and might appear in "expr1", "expr2", ... . */
/*----In ML, this would be "let rec name = expr in formula" or */
/*----"let name = expr in formula".  (thf has only one syntax for both cases.) */
/*----It is expected that each occurrence of "name_i" should be replaced */
/*----by "expr_i" within "formula", BUT NOT ELSEWHERE. */
/*----That is, "formula" is the scope of the definition. */
/*----For "cascading" definitions use "letrec [a := b]: letrec [c := d]: e". */
<thf_let_rec>        ::= letrec [<thf_definition_list>] : <thf_unitary_formula>
<thf_definition_list> ::= <thf_definition> |
                          <thf_definition>,<thf_definition_list>
<thf_definition>     ::= <atomic_word> := <thf_unitary_formula> |
                         ( <thf_definition> )

/*---- END THF ----------------------------------------------------------------- */

/*---- START TFF --------------------------------- */
/*----TFF formulae. All formulae must be closed. */
/*----TFF is like FOF except that predicate and function symbols may be typed */
/*----at top level (normally with formula role "type"), and variables may be */
/*----typed when they are bound in quantifier lists. */
/*----<atomic_formula>s are just like FOF. */

/*----The following conventions allow a fof_formula to be treated as */
/*----a tff_formula. */
/*----If a type is not explicitly declared for a predicate, it defaults to */
/*----    (<iType> * <iType> * ...) -> <oType>. */
/*----If a type is not explicitly declared for a function, it defaults to */
/*----    (<iType> * <iType> * ...) -> <iType>. */
/*----If a type is not explicitly declared for a variable, it defaults to */
/*----     <iType>. */

<tff_formula>        ::= <tff_binary_formula> | <tff_unitary_formula> |
                         <tff_typed_atom>

<tff_binary_formula> ::= <tff_nonassoc_binary> | <tff_assoc_binary>
/*----Only some binary connectives are associative */
/*----There's no precedence among binary connectives */
<tff_nonassoc_binary> ::= <tff_unitary_formula> <binary_connective> <tff_unitary_formula>
/*----Associative connectives & and | are in <tff_assoc_binary> */
<tff_assoc_binary>   ::= <tff_or_formula> | <tff_and_formula>
<tff_or_formula>     ::= <tff_unitary_formula> <vline> <tff_unitary_formula>
                         <tff_more_or_formula>*
<tff_more_or_formula> ::= <vline> <tff_unitary_formula>
<tff_and_formula>    ::= <tff_unitary_formula> & <tff_unitary_formula>
                         <tff_more_and_formula>*
<tff_more_and_formula> ::= & <tff_unitary_formula>
/*----<tff_unitary_formula> are in ()s or do not have a <tff_binary_connective> */
/*----at the top level. */
<tff_unitary_formula> ::= <tff_quantified_formula> | <tff_unary_formula> |
                          <atomic_formula> |
                          ( <tff_binary_formula> ) | ( <tff_unitary_formula> )
<tff_quantified_formula> ::= <quantifier> [<tff_variable_list>] : <tff_unitary_formula>
<tff_variable_list>  ::= <tff_variable> | <tff_variable>,<tff_variable_list>

/*----Unary connectives bind more tightly than binary */
<tff_unary_formula>  ::= <unary_connective> <tff_unitary_formula>

/*----tff_typed_atom can appear ONLY at top level, unlike thf. */
<tff_typed_atom>     ::= <tff_untyped_atom> : <tff_type_spec> |
                         ( <tff_typed_atom> )
/*----tff_untyped_atom can be a predicate symbol or a function symbol. */
/*----Unlike thf, tff_untyped_atom cannot be a variable. */
<tff_untyped_atom>   ::= <functor> | <defined_term> | <system_functor>

<tff_variable>       ::= <tff_untyped_variable> | <tff_typed_variable>
<tff_typed_variable> ::= <tff_untyped_variable> : <tff_type_spec>
<tff_untyped_variable> ::= <variable>

/*----<tff_type_spec> can only appear after ":", where a type is being specified */
/*----for a function or predicate or variable. */
/*----<map_arrow> is right-associative: o->o->o means o->(o->o). */
/*----<star> is left-associative: o * o * o means (o * o) * o. */
/*----<plus> is left-associative: o + o + o means (o + o) + o. */
/*----We cannot use <vline> for union because of conflict with "or formula". */
<tff_type_spec>      ::= <tff_untyped_atom> | <defined_type> |
                         <tff_type_expr> | ( <tff_type_spec> )
<tff_type_expr>      ::= ( <tff_binary_type> )
<tff_binary_type>    ::= <tff_mapping_type> | <tff_xprod_type> |
                         <tff_union_type>
<tff_mapping_type>   ::= <tff_unitary_type> <map_arrow> <tff_mapping_type> |
                         <tff_unitary_type> <map_arrow> <tff_unitary_type>
<tff_xprod_type>     ::= <tff_xprod_type> <star> <tff_unitary_type> |
                         <tff_unitary_type> <star> <tff_unitary_type>
<tff_union_type>     ::= <tff_union_type> <plus> <tff_unitary_type> |
                         <tff_unitary_type> <plus> <tff_unitary_type>
<tff_unitary_type>   ::= <tff_untyped_atom> | <defined_type> | <tff_type_expr>


/*---- END TFF --------------------------------- */








/*----Atoms (<predicate> is not used currently) */
<atomic_formula>     ::= <plain_atom> | <defined_atom> | <system_atom>
<plain_atom>         ::= <plain_term>
/*----A <plain_atom> looks like a <plain_term>, but really we mean */
/*----  <plain_atom>         ::= <proposition> | <predicate>(<arguments>) */
/*----  <proposition>        ::= <atomic_word> */
/*----  <predicate>          ::= <atomic_word> */
<arguments>          ::= <term> | <term>,<arguments>
/*----Using <plain_term> removes a reduce/reduce ambiguity in lex/yacc. */
<defined_atom>       ::= <defined_prop> | <defined_pred>(<arguments>) |
                         <term> <defined_infix_pred> <term>
<defined_infix_pred> ::= = | !=
<defined_prop>       ::= <trueProp>  | <falseProp>
<defined_pred>       ::= <atomic_defined_word>
<defined_pred>       :==
<defined_type>       ::= <oType> | <iType> | <tType>

/*----Some systems still interpret equal/2 as equality. The use of equal/2 */
/*----for other purposes is therefore discouraged. Please refrain from either  */
/*----use. Use infix '=' for equality. Note: <term> != <term> is equivalent */
/*----to ~ <term> = <term> */
/*----More defined atoms may be added in the future. */
<system_atom>        ::= <system_term>
/*----<system_atom>s are used for evaluable predicates that are available */
/*----in particular tools. The predicate names are not controlled by the */
/*----TPTP syntax, so use with due care. The same is true for <system_term>s. */

/*----Terms */
<term>               ::= <function_term> | <variable>
<function_term>      ::= <plain_term> | <defined_term> | <system_term>
<plain_term>         ::= <constant> | <functor>(<arguments>)
<constant>           ::= <atomic_word>
<functor>            ::= <atomic_word>
<defined_term>       ::= <number> | <distinct_object>
/*----A more general formulation, which syntactically admits more defined terms, */
/*----is as follows. Developers may prefer to adopt this. */
/*----  <defined_term>       ::= <number> | <distinct_object> | */
/*----                           <defined_constant> |  */
/*----                           <defined_functor>(<arguments>) | */
/*----                           <term> <defined_infix_func> <term> */
/*----  <defined_constant>   ::= <atomic_defined_word> */
/*----  <defined_constant>   :==  */
/*----  <defined_functor>    ::= <atomic_defined_word> */
/*----  <defined_functor>    :== */
/*----  <defined_infix_func> ::=  */
/*----System terms have system specific interpretations */
<system_term>        ::= <system_constant> | <system_functor>(<arguments>)
<system_functor>     ::= <atomic_system_word>
<system_constant>    ::= <atomic_system_word>
<variable>           ::= <upper_word>

/*----Formula sources */
<source>             ::= <general_term>
<source>             :== <dag_source> | <internal_source> | <external_source> |
                         unknown
/*----Only a <dag_source> can be a <name>, i.e., derived formulae can be */
/*----identified by a <name> or an <inference_record>  */
<dag_source>         :== <name> | <inference_record>
<inference_record>   :== inference(<inference_rule>,<useful_info>,
                             [<parent_list>])
<inference_rule>     :== <atomic_word>
/*----Examples are        deduction | modus_tollens | modus_ponens | rewrite |  */
/*                        resolution | paramodulation | factorization |  */
/*                        cnf_conversion | cnf_refutation | ... */
<parent_list>        :== <parent_info> | <parent_info>,<parent_list>
<parent_info>        :== <source><parent_details>
<parent_details>     :== :<atomic_word> | <null>
<internal_source>    :== introduced(<intro_type><optional_info>)
<intro_type>         :== definition | axiom_of_choice | tautology
/*----This should be used to record the symbol being defined, or the function */
/*----for the axiom of choice */
<external_source>    :== <file_source> | <theory> | <creator_source>
<file_source>        :== file(<file_name><file_info>)
<file_info>          :== ,<name> | <null>
<theory>             :== theory(<theory_name><optional_info>)
<theory_name>        :== equality | ac
/*----More theory names may be added in the future. The <optional_info> is */
/*----used to store, e.g., which axioms of equality have been implicitly used, */
/*----e.g., theory(equality,[rst]). Standard format still to be decided. */
<creator_source>     :== creator(<creator_name><optional_info>)
<creator_name>       :== <atomic_word>

/*----Useful info fields */
<optional_info>      ::= ,<useful_info> | <null>
<useful_info>        ::= <general_term_list>
<useful_info>        :== [] | [<info_items>]
<info_items>         :== <info_item> | <info_item>,<info_items>
<info_item>          :== <formula_item> | <inference_item> | <general_function>
/*----Useful info for formula records */
<formula_item>       :== <description_item> | <iquote_item> 
<description_item>   :== description(<atomic_word>)
<iquote_item>        :== iquote(<atomic_word>)
/*----<iquote_item>s are used for recording exactly what the system output about */
/*----the inference step. In the future it is planned to encode this information */
/*----in standardized forms as <parent_details> in each <inference_record>. */
/*----Useful info for inference records */
<inference_item>     :== <inference_status> | <refutation>
<inference_status>   :== status(<status_value>) | <inference_info>
/*----These are the status values from the SZS ontology */
<status_value>       :== tau | tac | eqv | thm | sat | cax | noc | csa | cth |
                         ceq | unc | uns | sab | sam | sar | sap | csp | csr |
                         csm | csb
/*----The most commonly used status values are: */
/*----  thm - Every model (and there are some) of the parent formulae is a  */
/*----        model of the inferred formula. Regular logical consequences. */
/*----  cth - Every model (and there are some) of the parent formulae is a  */
/*----        model of the negation of the inferred formula. Used for negation */
/*----        of conjectures in FOF to CNF conversion. */
/*----  sab - There is a bijection between the models (and there are some) of */
/*----        the parent formulae and models of the inferred formula. Used for */
/*----        Skolemization steps. */
/*----For the full hierarchy see the SZSOntology file distributed with the TPTP. */
<inference_info>     :== <inference_rule>(<atomic_word>,<general_list>)
<refutation>         :== refutation(<file_source>)
/*----Useful info for creators is just <general_function> */

/*----Include directives */
<include>            ::= include(<file_name><formula_selection>).
<formula_selection>  ::= ,[<name_list>] | <null>
<name_list>          ::= <name> | <name>,<name_list>

/*----Non-logical data */
<general_term>       ::= <general_data> | <general_data>:<general_term> |
                         <general_list> 
<general_data>       ::= <atomic_word> | <atomic_word>(<general_arguments>) |
                         <number> | <distinct_object>
<general_arguments>  ::= <general_term> | <general_term>,<general_arguments>
<general_list>       ::= [] | [<general_term_list>]
<general_term_list>  ::= <general_term> | <general_term>,<general_term_list>

/*----General purpose.  SOME ARE USED BY thf and tff, as well as fof, cnf! */
<name>               ::= <atomic_word> | <unsigned_integer>
<atomic_word>        ::= <lower_word> | <single_quoted>
<atomic_defined_word> ::= <dollar_word>
<atomic_system_word> ::= <dollar_dollar_word>
<number>             ::= <real> | <signed_integer> | <unsigned_integer>
/*----Numbers are always interpreted as themselves, and are thus implicitly  */
/*----distinct if they have different values, e.g., 1 != 2 is an implicit axiom.  */
/*----All numbers are base 10 at the moment. */
<file_name>          ::= <atomic_word>
<null>               ::=

/*------------------------------------------------------------------------------ */
/*----Rules from here on down are for defining tokens (terminal symbols) of the */
/*----grammar, assuming they will be recognized by a lexical scanner.  */
/*----A ::- rule defines a token, a ::: rule defines a macro that is not a  */
/*----token. Usual regexp notation is used. Single characters are always placed */
/*----in []s to disable any special meanings (for uniformity this is done to */
/*----all characters, not only those with special meanings). */

/*----These are tokens that appear in the syntax rules above. No rules */
/*----defined here because they appear explicitly in the syntax rules, */
/*----except that <vline>, <star>, <plus> denote "|", "*", "+", respectively. */
/*----Keywords:    fof cnf thf tff include */
/*----Punctuation: ( ) , . [ ] : */
/*----Operators:   ! ? ~ & | <=> => <= <~> ~| ~& * + */
/*----Predicates:  = != $true $false */

/*----For lex/yacc there cannot be spaces on eiither side of the | here */
<comment>            ::: <comment_line>|<comment_block>
<comment_line>       ::: [%]<printable_char>*
<comment_block>      ::: [/][*]<not_star_slash>[*][*]*[/]
<not_star_slash>     ::: ([^*]*[*][*]*[^/*])*[^*]*
/*----System comments are a convention used for annotations that may used as  */
/*----additional input to a specific system. They look like comments, but start  */
/*----with %$$ or /*$$. A wily user of the syntax can notice the $$ and extract  */
/*----information from the "comment" and pass that on as input to the system.  */
/*----The specific system for which the information is intended should be  */
/*----identified after the $$, e.g., /*$$Otter 3.3: Demodulator */
/*----To extract these separately from regular comments, the rules are: */
/*----  <system_comment>     ::- <sys_comment_line>|<sys_comment_block> */
/*----  <sys_comment_line>   ::: [%]<dollar_dollar><printable_char>* */
/*----  <sys_comment_block>  ::: [/][*]<dollar_dollar><not_star_slash>[*][*]*[/] */
/*----A string that matches both <system_comment> and <comment> should be */
/*----recognized as <system_comment>, so put these before regular comments. */

<single_quoted>      ::- [']([^\\']|[\\][']|[\\][\\])*[']
/*----<single_quoted>      ::- '<printable_char>*', but ' and \ are escaped. */
/*----\ is used as the escape character for ' and \, i.e., if \' is  encountered */
/*----the ' is not the end of the <single_quoted>, and if \\ is encountered the  */
/*----second \ is not an escape. Both characters (the escape \ and the following */
/*----' or \) are retained and printed on output. Behaviour is undefined if the */
/*----escape \ is followed by anything other than ' or \. Behaviour is undefined */
/*----if a non-<printable_char> is encountered. If the contents of a <single */
/*----quoted> constitute a <lower_word>, then the ''s should be stripped to */
/*----produce a <lower_word>. */

<distinct_object>    ::- ["]([^\\"]|[\\]["]|[\\][\\])*["]
/*----<distinct_object>    ::- "<printable_char>*", but " and \ are escaped. The */
/*----comments for <single_quoted> apply, with ' replaced by ". */
/*----Distinct objects are always interpreted as themselves, and are thus  */
/*----implicitly distinct if they look different, e.g., "Apple" != "Microsoft" */
/*----is an implicit axiom.  */

<oType>              ::- [$](oType|o)
<iType>              ::- [$](iType|i)
<tType>              ::- [$](tType|t)
<trueProp>           ::- [$]true
<falseProp>          ::- [$]false
<dollar_word>        ::- [$]<lower_word>
<dollar_dollar_word> ::- <dollar_dollar><lower_word>
<upper_word>         ::- <upper_alpha><alpha_numeric>*
<lower_word>         ::- <lower_alpha><alpha_numeric>*
<plus>               ::- [+]

/*----Numbers */
<real>               ::- (<signed_decimal>|<unsigned_decimal>)<fraction_decimal>
<signed_integer>     ::- <sign><unsigned_integer>
<unsigned_integer>   ::- <unsigned_decimal>
<signed_decimal>     ::: <sign><unsigned_decimal>
<sign>               ::: [+-]
<unsigned_decimal>   ::: ([0]|<non_zero_numeric><numeric>*)
<fraction_decimal>   ::: [.]<numeric><numeric>*

/*----Character classes */
<numeric>            ::: [0-9]
<non_zero_numeric>   ::: [1-9]
<lower_alpha>        ::: [a-z]
<upper_alpha>        ::: [A-Z]
<alpha_numeric>      ::: (<lower_alpha>|<upper_alpha>|<numeric>|[_])
<dollar_dollar>      ::: [$][$]
<printable_char>     ::: .
/*----<printable_char>     ::: any printable ASCII character, codes 32-126 */
/*----<printable_char> thus includes spaces, but not tabs, newlines, bells, etc. */
/*----This definition does not capture that. */

/*----The following macros have no effect and are for documentation only. */
<vline>              ::: [|]
<star>               ::: [*]
/*------------------------------------------------------------------------------ */
